/*
 * generated by Xtext
 */
package org.eclipse.qvto.examples.xtext.qvtoperational.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.qvto.examples.xtext.imperativeocl.services.ImperativeOCLGrammarAccess;
import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;

@Singleton
public class QVTOperationalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopLevelCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedImportsImportCSParserRuleCall_0_0 = (RuleCall)cOwnedImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedPackagesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedPackagesUnitPackageCSParserRuleCall_1_0_0 = (RuleCall)cOwnedPackagesAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedTypesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedTypesUnitTypeCSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypesAssignment_1_1.eContents().get(0);
		private final Assignment cOwnedAnnotationsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cOwnedAnnotationsTagCSParserRuleCall_1_2_0 = (RuleCall)cOwnedAnnotationsAssignment_1_2.eContents().get(0);
		
		//TopLevelCS:
		//	ownedImports+=ImportCS* (ownedPackages+=UnitPackageCS | ownedTypes+=UnitTypeCS | ownedAnnotations+=TagCS)*;
		@Override public ParserRule getRule() { return rule; }

		//ownedImports+=ImportCS* (ownedPackages+=UnitPackageCS | ownedTypes+=UnitTypeCS | ownedAnnotations+=TagCS)*
		public Group getGroup() { return cGroup; }

		//ownedImports+=ImportCS*
		public Assignment getOwnedImportsAssignment_0() { return cOwnedImportsAssignment_0; }

		//ImportCS
		public RuleCall getOwnedImportsImportCSParserRuleCall_0_0() { return cOwnedImportsImportCSParserRuleCall_0_0; }

		//(ownedPackages+=UnitPackageCS | ownedTypes+=UnitTypeCS | ownedAnnotations+=TagCS)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ownedPackages+=UnitPackageCS
		public Assignment getOwnedPackagesAssignment_1_0() { return cOwnedPackagesAssignment_1_0; }

		//UnitPackageCS
		public RuleCall getOwnedPackagesUnitPackageCSParserRuleCall_1_0_0() { return cOwnedPackagesUnitPackageCSParserRuleCall_1_0_0; }

		//ownedTypes+=UnitTypeCS
		public Assignment getOwnedTypesAssignment_1_1() { return cOwnedTypesAssignment_1_1; }

		//UnitTypeCS
		public RuleCall getOwnedTypesUnitTypeCSParserRuleCall_1_1_0() { return cOwnedTypesUnitTypeCSParserRuleCall_1_1_0; }

		//ownedAnnotations+=TagCS
		public Assignment getOwnedAnnotationsAssignment_1_2() { return cOwnedAnnotationsAssignment_1_2; }

		//TagCS
		public RuleCall getOwnedAnnotationsTagCSParserRuleCall_1_2_0() { return cOwnedAnnotationsTagCSParserRuleCall_1_2_0; }
	}

	public class TransformationQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBlackboxKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStaticKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// FIXME use a CS element and unordered groups
		// TransformationQualifier returns ecore::EString:
		//	"blackbox" | "abstract" | "static";
		@Override public ParserRule getRule() { return rule; }

		//"blackbox" | "abstract" | "static"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"blackbox"
		public Keyword getBlackboxKeyword_0() { return cBlackboxKeyword_0; }

		//"abstract"
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }

		//"static"
		public Keyword getStaticKeyword_2() { return cStaticKeyword_2; }
	}

	public class LibraryQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryQualifier");
		private final Keyword cBlackboxKeyword = (Keyword)rule.eContents().get(1);
		
		//LibraryQualifier returns ecore::EString:
		//	"blackbox";
		@Override public ParserRule getRule() { return rule; }

		//"blackbox"
		public Keyword getBlackboxKeyword() { return cBlackboxKeyword; }
	}

	public class FeatureQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cComposesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReferencesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cReadonlyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDerivedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStaticKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//FeatureQualifier returns ecore::EString:
		//	"composes" | "references" | "readonly" | "derived" | "static";
		@Override public ParserRule getRule() { return rule; }

		//"composes" | "references" | "readonly" | "derived" | "static"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"composes"
		public Keyword getComposesKeyword_0() { return cComposesKeyword_0; }

		//"references"
		public Keyword getReferencesKeyword_1() { return cReferencesKeyword_1; }

		//"readonly"
		public Keyword getReadonlyKeyword_2() { return cReadonlyKeyword_2; }

		//"derived"
		public Keyword getDerivedKeyword_3() { return cDerivedKeyword_3; }

		//"static"
		public Keyword getStaticKeyword_4() { return cStaticKeyword_4; }
	}

	public class OperationQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBlackboxKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStaticKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OperationQualifier returns ecore::EString:
		//	"blackbox" | "abstract" | "static";
		@Override public ParserRule getRule() { return rule; }

		//"blackbox" | "abstract" | "static"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"blackbox"
		public Keyword getBlackboxKeyword_0() { return cBlackboxKeyword_0; }

		//"abstract"
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }

		//"static"
		public Keyword getStaticKeyword_2() { return cStaticKeyword_2; }
	}

	public class MultiplicityCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicityCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLowerBoundAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLowerBoundLOWERParserRuleCall_1_0_0 = (RuleCall)cLowerBoundAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperBoundUPPERParserRuleCall_2_0 = (RuleCall)cUpperBoundAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ****** OCL redifinitions ****** //
		// // FIXME review this redefiniton. 
		// MultiplicityCS returns
		//base::MultiplicityBoundsCS:
		//	"[" (lowerBound=LOWER "...")? upperBound=UPPER "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" (lowerBound=LOWER "...")? upperBound=UPPER "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(lowerBound=LOWER "...")?
		public Group getGroup_1() { return cGroup_1; }

		//lowerBound=LOWER
		public Assignment getLowerBoundAssignment_1_0() { return cLowerBoundAssignment_1_0; }

		//LOWER
		public RuleCall getLowerBoundLOWERParserRuleCall_1_0_0() { return cLowerBoundLOWERParserRuleCall_1_0_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }

		//upperBound=UPPER
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//UPPER
		public RuleCall getUpperBoundUPPERParserRuleCall_2_0() { return cUpperBoundUPPERParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class PathName2CSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathName2CS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedPathElements2Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedPathElements2PathElement2CSParserRuleCall_0_0 = (RuleCall)cOwnedPathElements2Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedPathElements2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedPathElements2PathElement2CSParserRuleCall_1_1_0 = (RuleCall)cOwnedPathElements2Assignment_1_1.eContents().get(0);
		
		//PathName2CS:
		//	ownedPathElements2+=PathElement2CS ("::" ownedPathElements2+=PathElement2CS)*;
		@Override public ParserRule getRule() { return rule; }

		//ownedPathElements2+=PathElement2CS ("::" ownedPathElements2+=PathElement2CS)*
		public Group getGroup() { return cGroup; }

		//ownedPathElements2+=PathElement2CS
		public Assignment getOwnedPathElements2Assignment_0() { return cOwnedPathElements2Assignment_0; }

		//PathElement2CS
		public RuleCall getOwnedPathElements2PathElement2CSParserRuleCall_0_0() { return cOwnedPathElements2PathElement2CSParserRuleCall_0_0; }

		//("::" ownedPathElements2+=PathElement2CS)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ownedPathElements2+=PathElement2CS
		public Assignment getOwnedPathElements2Assignment_1_1() { return cOwnedPathElements2Assignment_1_1; }

		//PathElement2CS
		public RuleCall getOwnedPathElements2PathElement2CSParserRuleCall_1_1_0() { return cOwnedPathElements2PathElement2CSParserRuleCall_1_1_0; }
	}

	public class PathElement2CSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathElement2CS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PathElement2CS:
		//	name=UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }

		//name=UnrestrictedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0() { return cNameUnrestrictedNameParserRuleCall_0; }
	}

	public class TypedMultiplicityRef2CSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedMultiplicityRef2CS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypedRef2CSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedMultiplicityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMultiplicityMultiplicityCSParserRuleCall_1_0 = (RuleCall)cOwnedMultiplicityAssignment_1.eContents().get(0);
		
		//TypedMultiplicityRef2CS returns base::TypedRefCS:
		//	TypedRef2CS ownedMultiplicity=MultiplicityCS?;
		@Override public ParserRule getRule() { return rule; }

		//TypedRef2CS ownedMultiplicity=MultiplicityCS?
		public Group getGroup() { return cGroup; }

		//TypedRef2CS
		public RuleCall getTypedRef2CSParserRuleCall_0() { return cTypedRef2CSParserRuleCall_0; }

		//ownedMultiplicity=MultiplicityCS?
		public Assignment getOwnedMultiplicityAssignment_1() { return cOwnedMultiplicityAssignment_1; }

		//MultiplicityCS
		public RuleCall getOwnedMultiplicityMultiplicityCSParserRuleCall_1_0() { return cOwnedMultiplicityMultiplicityCSParserRuleCall_1_0; }
	}

	public class TypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRefCS");
		private final RuleCall cTypedRef2CSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// FIXME deviation from OCLInEcore. No templates parameter, yet
		// TypeRefCS returns base::TypeRefCS:
		//// | WildcardTypeRefCS
		// TypedRef2CS;
		@Override public ParserRule getRule() { return rule; }

		//// | WildcardTypeRefCS
		// TypedRef2CS
		public RuleCall getTypedRef2CSParserRuleCall() { return cTypedRef2CSParserRuleCall; }
	}

	public class TypedRef2CSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedRef2CS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeLiteralCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypedTypeRef2CSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedRef2CS returns base::TypedRefCS:
		//	TypeLiteralCS | TypedTypeRef2CS;
		@Override public ParserRule getRule() { return rule; }

		//TypeLiteralCS | TypedTypeRef2CS
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeLiteralCS
		public RuleCall getTypeLiteralCSParserRuleCall_0() { return cTypeLiteralCSParserRuleCall_0; }

		//TypedTypeRef2CS
		public RuleCall getTypedTypeRef2CSParserRuleCall_1() { return cTypedTypeRef2CSParserRuleCall_1; }
	}

	public class TypedTypeRef2CSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedTypeRef2CS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedPathNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedPathNamePathName2CSParserRuleCall_0_0 = (RuleCall)cOwnedPathNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedBindingTemplateBindingCSParserRuleCall_1_1_0 = (RuleCall)cOwnedBindingAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtentLocationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtentLocationUnrestrictedNameParserRuleCall_2_1_0 = (RuleCall)cExtentLocationAssignment_2_1.eContents().get(0);
		
		//TypedTypeRef2CS:
		//	ownedPathName=PathName2CS ("(" ownedBinding=TemplateBindingCS ")")? ("@" extentLocation=UnrestrictedName)?;
		@Override public ParserRule getRule() { return rule; }

		//ownedPathName=PathName2CS ("(" ownedBinding=TemplateBindingCS ")")? ("@" extentLocation=UnrestrictedName)?
		public Group getGroup() { return cGroup; }

		//ownedPathName=PathName2CS
		public Assignment getOwnedPathNameAssignment_0() { return cOwnedPathNameAssignment_0; }

		//PathName2CS
		public RuleCall getOwnedPathNamePathName2CSParserRuleCall_0_0() { return cOwnedPathNamePathName2CSParserRuleCall_0_0; }

		//("(" ownedBinding=TemplateBindingCS ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ownedBinding=TemplateBindingCS
		public Assignment getOwnedBindingAssignment_1_1() { return cOwnedBindingAssignment_1_1; }

		//TemplateBindingCS
		public RuleCall getOwnedBindingTemplateBindingCSParserRuleCall_1_1_0() { return cOwnedBindingTemplateBindingCSParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//("@" extentLocation=UnrestrictedName)?
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//extentLocation=UnrestrictedName
		public Assignment getExtentLocationAssignment_2_1() { return cExtentLocationAssignment_2_1; }

		//UnrestrictedName
		public RuleCall getExtentLocationUnrestrictedNameParserRuleCall_2_1_0() { return cExtentLocationUnrestrictedNameParserRuleCall_2_1_0; }
	}

	public class ClassCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDataTypeCSParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cExceptionCSParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cQVToClassCSParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// ****** QVTo ******
		// ClassCS returns base::ClassCS:
		//	(DataTypeCS | ExceptionCS | QVToClassCS) ";"?;
		@Override public ParserRule getRule() { return rule; }

		//(DataTypeCS | ExceptionCS | QVToClassCS) ";"?
		public Group getGroup() { return cGroup; }

		//DataTypeCS | ExceptionCS | QVToClassCS
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//DataTypeCS
		public RuleCall getDataTypeCSParserRuleCall_0_0() { return cDataTypeCSParserRuleCall_0_0; }

		//ExceptionCS
		public RuleCall getExceptionCSParserRuleCall_0_1() { return cExceptionCSParserRuleCall_0_1; }

		//QVToClassCS
		public RuleCall getQVToClassCSParserRuleCall_0_2() { return cQVToClassCSParserRuleCall_0_2; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ClassifierOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierOperationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedStereotypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedStereotypeStereotypeQualifierCSParserRuleCall_0_0 = (RuleCall)cOwnedStereotypeAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiersFeatureQualifierParserRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOwnedParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedParametersParameterCSParserRuleCall_4_0_0 = (RuleCall)cOwnedParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOwnedParametersParameterCSParserRuleCall_4_1_1_0 = (RuleCall)cOwnedParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_6_1_0 = (RuleCall)cOwnedTypeAssignment_6_1.eContents().get(0);
		
		//ClassifierOperationCS returns QVToOperationCS:
		//	ownedStereotype=StereotypeQualifierCS? qualifiers+=FeatureQualifier* name=UnrestrictedName "("
		//	(ownedParameters+=ParameterCS ("," ownedParameters+=ParameterCS)*)? ")" (":" ownedType=TypedMultiplicityRef2CS)?;
		@Override public ParserRule getRule() { return rule; }

		//ownedStereotype=StereotypeQualifierCS? qualifiers+=FeatureQualifier* name=UnrestrictedName "("
		//(ownedParameters+=ParameterCS ("," ownedParameters+=ParameterCS)*)? ")" (":" ownedType=TypedMultiplicityRef2CS)?
		public Group getGroup() { return cGroup; }

		//ownedStereotype=StereotypeQualifierCS?
		public Assignment getOwnedStereotypeAssignment_0() { return cOwnedStereotypeAssignment_0; }

		//StereotypeQualifierCS
		public RuleCall getOwnedStereotypeStereotypeQualifierCSParserRuleCall_0_0() { return cOwnedStereotypeStereotypeQualifierCSParserRuleCall_0_0; }

		//qualifiers+=FeatureQualifier*
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }

		//FeatureQualifier
		public RuleCall getQualifiersFeatureQualifierParserRuleCall_1_0() { return cQualifiersFeatureQualifierParserRuleCall_1_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_2_0() { return cNameUnrestrictedNameParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(ownedParameters+=ParameterCS ("," ownedParameters+=ParameterCS)*)?
		public Group getGroup_4() { return cGroup_4; }

		//ownedParameters+=ParameterCS
		public Assignment getOwnedParametersAssignment_4_0() { return cOwnedParametersAssignment_4_0; }

		//ParameterCS
		public RuleCall getOwnedParametersParameterCSParserRuleCall_4_0_0() { return cOwnedParametersParameterCSParserRuleCall_4_0_0; }

		//("," ownedParameters+=ParameterCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//ownedParameters+=ParameterCS
		public Assignment getOwnedParametersAssignment_4_1_1() { return cOwnedParametersAssignment_4_1_1; }

		//ParameterCS
		public RuleCall getOwnedParametersParameterCSParserRuleCall_4_1_1_0() { return cOwnedParametersParameterCSParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(":" ownedType=TypedMultiplicityRef2CS)?
		public Group getGroup_6() { return cGroup_6; }

		//":"
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }

		//ownedType=TypedMultiplicityRef2CS
		public Assignment getOwnedTypeAssignment_6_1() { return cOwnedTypeAssignment_6_1; }

		//TypedMultiplicityRef2CS
		public RuleCall getOwnedTypeTypedMultiplicityRef2CSParserRuleCall_6_1_0() { return cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_6_1_0; }
	}

	public class ClassifierPropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierPropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedStereotypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedStereotypeStereotypeQualifierCSParserRuleCall_0_0 = (RuleCall)cOwnedStereotypeAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiersFeatureQualifierParserRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_4_0 = (RuleCall)cOwnedTypeAssignment_4.eContents().get(0);
		private final Assignment cDefaultAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefaultSINGLE_QUOTED_STRINGTerminalRuleCall_5_0 = (RuleCall)cDefaultAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOppositesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cTildeKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOppositeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOppositeIdentifierParserRuleCall_6_2_0 = (RuleCall)cOppositeAssignment_6_2.eContents().get(0);
		
		//ClassifierPropertyCS:
		//	ownedStereotype=StereotypeQualifierCS? qualifiers+=FeatureQualifier* name=UnrestrictedName ":"
		//	ownedType=TypedMultiplicityRef2CS default=SINGLE_QUOTED_STRING?
		//	// FIXME QVTO syntax define a more complex InitPartCS	
		// ("opposites" "~"? opposite=Identifier)? // FIXME 
		//;
		@Override public ParserRule getRule() { return rule; }

		//ownedStereotype=StereotypeQualifierCS? qualifiers+=FeatureQualifier* name=UnrestrictedName ":"
		//ownedType=TypedMultiplicityRef2CS default=SINGLE_QUOTED_STRING?
		//// FIXME QVTO syntax define a more complex InitPartCS	
		// ("opposites" "~"? opposite=Identifier)? // FIXME
		public Group getGroup() { return cGroup; }

		//ownedStereotype=StereotypeQualifierCS?
		public Assignment getOwnedStereotypeAssignment_0() { return cOwnedStereotypeAssignment_0; }

		//StereotypeQualifierCS
		public RuleCall getOwnedStereotypeStereotypeQualifierCSParserRuleCall_0_0() { return cOwnedStereotypeStereotypeQualifierCSParserRuleCall_0_0; }

		//qualifiers+=FeatureQualifier*
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }

		//FeatureQualifier
		public RuleCall getQualifiersFeatureQualifierParserRuleCall_1_0() { return cQualifiersFeatureQualifierParserRuleCall_1_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_2_0() { return cNameUnrestrictedNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//ownedType=TypedMultiplicityRef2CS
		public Assignment getOwnedTypeAssignment_4() { return cOwnedTypeAssignment_4; }

		//TypedMultiplicityRef2CS
		public RuleCall getOwnedTypeTypedMultiplicityRef2CSParserRuleCall_4_0() { return cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_4_0; }

		//default=SINGLE_QUOTED_STRING?
		public Assignment getDefaultAssignment_5() { return cDefaultAssignment_5; }

		//SINGLE_QUOTED_STRING
		public RuleCall getDefaultSINGLE_QUOTED_STRINGTerminalRuleCall_5_0() { return cDefaultSINGLE_QUOTED_STRINGTerminalRuleCall_5_0; }

		//("opposites" "~"? opposite=Identifier)?
		public Group getGroup_6() { return cGroup_6; }

		//"opposites"
		public Keyword getOppositesKeyword_6_0() { return cOppositesKeyword_6_0; }

		//"~"?
		public Keyword getTildeKeyword_6_1() { return cTildeKeyword_6_1; }

		//opposite=Identifier
		public Assignment getOppositeAssignment_6_2() { return cOppositeAssignment_6_2; }

		//Identifier
		public RuleCall getOppositeIdentifierParserRuleCall_6_2_0() { return cOppositeIdentifierParserRuleCall_6_2_0; }
	}

	public class CompoundOperationBodyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundOperationBodyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationBodyCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedContentExpsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedContentExpsExpressionStatementCSParserRuleCall_2_0 = (RuleCall)cOwnedContentExpsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CompoundOperationBodyCS returns OperationBodyCS:
		//	{OperationBodyCS} "{" ownedContentExps+=ExpressionStatementCS* "}";
		@Override public ParserRule getRule() { return rule; }

		//{OperationBodyCS} "{" ownedContentExps+=ExpressionStatementCS* "}"
		public Group getGroup() { return cGroup; }

		//{OperationBodyCS}
		public Action getOperationBodyCSAction_0() { return cOperationBodyCSAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ownedContentExps+=ExpressionStatementCS*
		public Assignment getOwnedContentExpsAssignment_2() { return cOwnedContentExpsAssignment_2; }

		//ExpressionStatementCS
		public RuleCall getOwnedContentExpsExpressionStatementCSParserRuleCall_2_0() { return cOwnedContentExpsExpressionStatementCSParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ConfigurationPropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationPropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedScopedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedScopedNamePathName2CSParserRuleCall_2_0 = (RuleCall)cOwnedScopedNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedTypeTypeLiteralCSParserRuleCall_4_0 = (RuleCall)cOwnedTypeAssignment_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultStringLiteralParserRuleCall_6_0 = (RuleCall)cDefaultAssignment_6.eContents().get(0);
		
		//ConfigurationPropertyCS:
		//	"configuration" "property" ownedScopedName=PathName2CS ":" ownedType=TypeLiteralCS
		//	// FIXME OMG issue: allow default values for configuration properties
		// "=" default=StringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//"configuration" "property" ownedScopedName=PathName2CS ":" ownedType=TypeLiteralCS
		//// FIXME OMG issue: allow default values for configuration properties
		// "=" default=StringLiteral
		public Group getGroup() { return cGroup; }

		//"configuration"
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }

		//"property"
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }

		//ownedScopedName=PathName2CS
		public Assignment getOwnedScopedNameAssignment_2() { return cOwnedScopedNameAssignment_2; }

		//PathName2CS
		public RuleCall getOwnedScopedNamePathName2CSParserRuleCall_2_0() { return cOwnedScopedNamePathName2CSParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//ownedType=TypeLiteralCS
		public Assignment getOwnedTypeAssignment_4() { return cOwnedTypeAssignment_4; }

		//TypeLiteralCS
		public RuleCall getOwnedTypeTypeLiteralCSParserRuleCall_4_0() { return cOwnedTypeTypeLiteralCSParserRuleCall_4_0; }

		//// FIXME OMG issue: allow default values for configuration properties
		// "="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//default=StringLiteral
		public Assignment getDefaultAssignment_6() { return cDefaultAssignment_6; }

		//StringLiteral
		public RuleCall getDefaultStringLiteralParserRuleCall_6_0() { return cDefaultStringLiteralParserRuleCall_6_0; }
	}

	public class ContextualPropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextualPropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntermediateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedScopedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedScopedNamePathName2CSParserRuleCall_2_0 = (RuleCall)cOwnedScopedNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_4_0 = (RuleCall)cOwnedTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedInitExpAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedInitExpExpCSParserRuleCall_5_1_0 = (RuleCall)cOwnedInitExpAssignment_5_1.eContents().get(0);
		
		//ContextualPropertyCS:
		//	"intermediate" "property" ownedScopedName=PathName2CS ":" ownedType=TypedMultiplicityRef2CS ("="
		//	ownedInitExp=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }

		//"intermediate" "property" ownedScopedName=PathName2CS ":" ownedType=TypedMultiplicityRef2CS ("=" ownedInitExp=ExpCS)?
		public Group getGroup() { return cGroup; }

		//"intermediate"
		public Keyword getIntermediateKeyword_0() { return cIntermediateKeyword_0; }

		//"property"
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }

		//ownedScopedName=PathName2CS
		public Assignment getOwnedScopedNameAssignment_2() { return cOwnedScopedNameAssignment_2; }

		//PathName2CS
		public RuleCall getOwnedScopedNamePathName2CSParserRuleCall_2_0() { return cOwnedScopedNamePathName2CSParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//ownedType=TypedMultiplicityRef2CS
		public Assignment getOwnedTypeAssignment_4() { return cOwnedTypeAssignment_4; }

		//TypedMultiplicityRef2CS
		public RuleCall getOwnedTypeTypedMultiplicityRef2CSParserRuleCall_4_0() { return cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_4_0; }

		//("=" ownedInitExp=ExpCS)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//ownedInitExp=ExpCS
		public Assignment getOwnedInitExpAssignment_5_1() { return cOwnedInitExpAssignment_5_1; }

		//ExpCS
		public RuleCall getOwnedInitExpExpCSParserRuleCall_5_1_0() { return cOwnedInitExpExpCSParserRuleCall_5_1_0; }
	}

	public class ConstructorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstructorDeclarationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstructorDefinitionCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstructorCS returns ConstructorOperationCS:
		//	ConstructorDeclarationCS | ConstructorDefinitionCS;
		@Override public ParserRule getRule() { return rule; }

		//ConstructorDeclarationCS | ConstructorDefinitionCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstructorDeclarationCS
		public RuleCall getConstructorDeclarationCSParserRuleCall_0() { return cConstructorDeclarationCSParserRuleCall_0; }

		//ConstructorDefinitionCS
		public RuleCall getConstructorDefinitionCSParserRuleCall_1() { return cConstructorDefinitionCSParserRuleCall_1; }
	}

	public class ConstructorDeclarationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDeclarationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstructorHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ConstructorDeclarationCS returns ConstructorOperationCS:
		//	ConstructorHeaderCS ";";
		@Override public ParserRule getRule() { return rule; }

		//ConstructorHeaderCS ";"
		public Group getGroup() { return cGroup; }

		//ConstructorHeaderCS
		public RuleCall getConstructorHeaderCSParserRuleCall_0() { return cConstructorHeaderCSParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ConstructorDefinitionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDefinitionCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstructorHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedBodyCompoundOperationBodyCSParserRuleCall_1_0 = (RuleCall)cOwnedBodyAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ConstructorDefinitionCS returns ConstructorOperationCS:
		//	ConstructorHeaderCS ownedBody=CompoundOperationBodyCS ";"?;
		@Override public ParserRule getRule() { return rule; }

		//ConstructorHeaderCS ownedBody=CompoundOperationBodyCS ";"?
		public Group getGroup() { return cGroup; }

		//ConstructorHeaderCS
		public RuleCall getConstructorHeaderCSParserRuleCall_0() { return cConstructorHeaderCSParserRuleCall_0; }

		//ownedBody=CompoundOperationBodyCS
		public Assignment getOwnedBodyAssignment_1() { return cOwnedBodyAssignment_1; }

		//CompoundOperationBodyCS
		public RuleCall getOwnedBodyCompoundOperationBodyCSParserRuleCall_1_0() { return cOwnedBodyCompoundOperationBodyCSParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ConstructorHeaderCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorHeaderCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiersOperationQualifierParserRuleCall_0_0 = (RuleCall)cQualifiersAssignment_0.eContents().get(0);
		private final Keyword cConstructorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedScopedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedScopedNamePathName2CSParserRuleCall_2_0 = (RuleCall)cOwnedScopedNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOwnedParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedParametersParameterCSParserRuleCall_4_0_0 = (RuleCall)cOwnedParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOwnedParametersParameterCSParserRuleCall_4_1_1_0 = (RuleCall)cOwnedParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstructorHeaderCS returns ConstructorOperationCS:
		//	qualifiers+=OperationQualifier* "constructor" ownedScopedName=PathName2CS "(" (ownedParameters+=ParameterCS (","
		//	ownedParameters+=ParameterCS)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//qualifiers+=OperationQualifier* "constructor" ownedScopedName=PathName2CS "(" (ownedParameters+=ParameterCS (","
		//ownedParameters+=ParameterCS)*)? ")"
		public Group getGroup() { return cGroup; }

		//qualifiers+=OperationQualifier*
		public Assignment getQualifiersAssignment_0() { return cQualifiersAssignment_0; }

		//OperationQualifier
		public RuleCall getQualifiersOperationQualifierParserRuleCall_0_0() { return cQualifiersOperationQualifierParserRuleCall_0_0; }

		//"constructor"
		public Keyword getConstructorKeyword_1() { return cConstructorKeyword_1; }

		//ownedScopedName=PathName2CS
		public Assignment getOwnedScopedNameAssignment_2() { return cOwnedScopedNameAssignment_2; }

		//PathName2CS
		public RuleCall getOwnedScopedNamePathName2CSParserRuleCall_2_0() { return cOwnedScopedNamePathName2CSParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(ownedParameters+=ParameterCS ("," ownedParameters+=ParameterCS)*)?
		public Group getGroup_4() { return cGroup_4; }

		//ownedParameters+=ParameterCS
		public Assignment getOwnedParametersAssignment_4_0() { return cOwnedParametersAssignment_4_0; }

		//ParameterCS
		public RuleCall getOwnedParametersParameterCSParserRuleCall_4_0_0() { return cOwnedParametersParameterCSParserRuleCall_4_0_0; }

		//("," ownedParameters+=ParameterCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//ownedParameters+=ParameterCS
		public Assignment getOwnedParametersAssignment_4_1_1() { return cOwnedParametersAssignment_4_1_1; }

		//ParameterCS
		public RuleCall getOwnedParametersParameterCSParserRuleCall_4_1_1_0() { return cOwnedParametersParameterCSParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DataTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDatatypeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cPrimitiveTypeCSAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cPrimitiveKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataTypeCS returns base::DataTypeCS:
		//	("datatype" | {PrimitiveTypeCS} "primitive") name=UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }

		//("datatype" | {PrimitiveTypeCS} "primitive") name=UnrestrictedName
		public Group getGroup() { return cGroup; }

		//"datatype" | {PrimitiveTypeCS} "primitive"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"datatype"
		public Keyword getDatatypeKeyword_0_0() { return cDatatypeKeyword_0_0; }

		//{PrimitiveTypeCS} "primitive"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{PrimitiveTypeCS}
		public Action getPrimitiveTypeCSAction_0_1_0() { return cPrimitiveTypeCSAction_0_1_0; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0_1_1() { return cPrimitiveKeyword_0_1_1; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }
	}

	public class EntryOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryOperationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedBodyCompoundOperationBodyCSParserRuleCall_3_0 = (RuleCall)cOwnedBodyAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EntryOperationCS:
		//	"main" "(" ")" ownedBody=CompoundOperationBodyCS ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"main" "(" ")" ownedBody=CompoundOperationBodyCS ";"?
		public Group getGroup() { return cGroup; }

		//"main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//ownedBody=CompoundOperationBodyCS
		public Assignment getOwnedBodyAssignment_3() { return cOwnedBodyAssignment_3; }

		//CompoundOperationBodyCS
		public RuleCall getOwnedBodyCompoundOperationBodyCSParserRuleCall_3_0() { return cOwnedBodyCompoundOperationBodyCSParserRuleCall_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EnumerationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cOwnedLiteralsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cOwnedLiteralsEnumerationLiteralCSParserRuleCall_2_1_0_0 = (RuleCall)cOwnedLiteralsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cOwnedLiteralsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cOwnedLiteralsEnumerationLiteralCSParserRuleCall_2_1_1_1_0 = (RuleCall)cOwnedLiteralsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// FIXME Deviation from official grammar
		// EnumerationCS returns base::EnumerationCS:
		//	"enum" name=Identifier ("{" (ownedLiterals+=EnumerationLiteralCS ("," ownedLiterals+=EnumerationLiteralCS)*) "}")
		//	";"?;
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=Identifier ("{" (ownedLiterals+=EnumerationLiteralCS ("," ownedLiterals+=EnumerationLiteralCS)*) "}") ";"?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"{" (ownedLiterals+=EnumerationLiteralCS ("," ownedLiterals+=EnumerationLiteralCS)*) "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//ownedLiterals+=EnumerationLiteralCS ("," ownedLiterals+=EnumerationLiteralCS)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//ownedLiterals+=EnumerationLiteralCS
		public Assignment getOwnedLiteralsAssignment_2_1_0() { return cOwnedLiteralsAssignment_2_1_0; }

		//EnumerationLiteralCS
		public RuleCall getOwnedLiteralsEnumerationLiteralCSParserRuleCall_2_1_0_0() { return cOwnedLiteralsEnumerationLiteralCSParserRuleCall_2_1_0_0; }

		//("," ownedLiterals+=EnumerationLiteralCS)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//ownedLiterals+=EnumerationLiteralCS
		public Assignment getOwnedLiteralsAssignment_2_1_1_1() { return cOwnedLiteralsAssignment_2_1_1_1; }

		//EnumerationLiteralCS
		public RuleCall getOwnedLiteralsEnumerationLiteralCSParserRuleCall_2_1_1_1_0() { return cOwnedLiteralsEnumerationLiteralCSParserRuleCall_2_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EnumerationLiteralCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteralCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteralCS returns base::EnumerationLiteralCS:
		//	name=UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }

		//name=UnrestrictedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0() { return cNameUnrestrictedNameParserRuleCall_0; }
	}

	public class ExceptionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptionCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cOwnedSuperTypesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cOwnedSuperTypesTypedRefCSParserRuleCall_2_1_0_0 = (RuleCall)cOwnedSuperTypesAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cOwnedSuperTypesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cOwnedSuperTypesTypedRefCSParserRuleCall_2_1_1_1_0 = (RuleCall)cOwnedSuperTypesAssignment_2_1_1_1.eContents().get(0);
		
		//// FIXME for the time being, exception is another class
		// ExceptionCS returns base::StructuredClassCS:
		//	"exception" name=UnrestrictedName ("extends" (ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))?;
		@Override public ParserRule getRule() { return rule; }

		//"exception" name=UnrestrictedName ("extends" (ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))?
		public Group getGroup() { return cGroup; }

		//"exception"
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//("extends" (ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//ownedSuperTypes+=TypedRefCS
		public Assignment getOwnedSuperTypesAssignment_2_1_0() { return cOwnedSuperTypesAssignment_2_1_0; }

		//TypedRefCS
		public RuleCall getOwnedSuperTypesTypedRefCSParserRuleCall_2_1_0_0() { return cOwnedSuperTypesTypedRefCSParserRuleCall_2_1_0_0; }

		//("," ownedSuperTypes+=TypedRefCS)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//ownedSuperTypes+=TypedRefCS
		public Assignment getOwnedSuperTypesAssignment_2_1_1_1() { return cOwnedSuperTypesAssignment_2_1_1_1; }

		//TypedRefCS
		public RuleCall getOwnedSuperTypesTypedRefCSParserRuleCall_2_1_1_1_0() { return cOwnedSuperTypesTypedRefCSParserRuleCall_2_1_1_1_0; }
	}

	public class HelperCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelperCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHelperDeclarationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHelperDefinitionCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HelperCS returns HelperOperationCS:
		//	HelperDeclarationCS | HelperDefinitionCS;
		@Override public ParserRule getRule() { return rule; }

		//HelperDeclarationCS | HelperDefinitionCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//HelperDeclarationCS
		public RuleCall getHelperDeclarationCSParserRuleCall_0() { return cHelperDeclarationCSParserRuleCall_0; }

		//HelperDefinitionCS
		public RuleCall getHelperDefinitionCSParserRuleCall_1() { return cHelperDefinitionCSParserRuleCall_1; }
	}

	public class HelperDeclarationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelperDeclarationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHelperHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//HelperDeclarationCS returns HelperOperationCS:
		//	HelperHeaderCS ";";
		@Override public ParserRule getRule() { return rule; }

		//HelperHeaderCS ";"
		public Group getGroup() { return cGroup; }

		//HelperHeaderCS
		public RuleCall getHelperHeaderCSParserRuleCall_0() { return cHelperHeaderCSParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class HelperHeaderCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelperHeaderCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiersOperationQualifierParserRuleCall_0_0 = (RuleCall)cQualifiersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHelperKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsQueryAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsQueryQueryKeyword_1_1_0 = (Keyword)cIsQueryAssignment_1_1.eContents().get(0);
		private final Assignment cOwnedScopedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedScopedNamePathName2CSParserRuleCall_2_0 = (RuleCall)cOwnedScopedNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOwnedParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_4_0_0 = (RuleCall)cOwnedParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_4_1_1_0 = (RuleCall)cOwnedParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOwnedResultsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOwnedResultsParameterDeclarationCSParserRuleCall_6_1_0 = (RuleCall)cOwnedResultsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cOwnedResultsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cOwnedResultsParameterDeclarationCSParserRuleCall_6_2_1_0 = (RuleCall)cOwnedResultsAssignment_6_2_1.eContents().get(0);
		
		//HelperHeaderCS returns HelperOperationCS:
		//	qualifiers+=OperationQualifier* ("helper" | isQuery?="query") ownedScopedName=PathName2CS "{"
		//	(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)? ")" (":"
		//	ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))?;
		@Override public ParserRule getRule() { return rule; }

		//qualifiers+=OperationQualifier* ("helper" | isQuery?="query") ownedScopedName=PathName2CS "{"
		//(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)? ")" (":"
		//ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))?
		public Group getGroup() { return cGroup; }

		//qualifiers+=OperationQualifier*
		public Assignment getQualifiersAssignment_0() { return cQualifiersAssignment_0; }

		//OperationQualifier
		public RuleCall getQualifiersOperationQualifierParserRuleCall_0_0() { return cQualifiersOperationQualifierParserRuleCall_0_0; }

		//"helper" | isQuery?="query"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"helper"
		public Keyword getHelperKeyword_1_0() { return cHelperKeyword_1_0; }

		//isQuery?="query"
		public Assignment getIsQueryAssignment_1_1() { return cIsQueryAssignment_1_1; }

		//"query"
		public Keyword getIsQueryQueryKeyword_1_1_0() { return cIsQueryQueryKeyword_1_1_0; }

		//ownedScopedName=PathName2CS
		public Assignment getOwnedScopedNameAssignment_2() { return cOwnedScopedNameAssignment_2; }

		//PathName2CS
		public RuleCall getOwnedScopedNamePathName2CSParserRuleCall_2_0() { return cOwnedScopedNamePathName2CSParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)?
		public Group getGroup_4() { return cGroup_4; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_4_0() { return cOwnedParametersAssignment_4_0; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_4_0_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_4_0_0; }

		//("," ownedParameters+=ParameterDeclarationCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_4_1_1() { return cOwnedParametersAssignment_4_1_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_4_1_1_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(":" ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))?
		public Group getGroup_6() { return cGroup_6; }

		//":"
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }

		//ownedResults+=ParameterDeclarationCS
		public Assignment getOwnedResultsAssignment_6_1() { return cOwnedResultsAssignment_6_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedResultsParameterDeclarationCSParserRuleCall_6_1_0() { return cOwnedResultsParameterDeclarationCSParserRuleCall_6_1_0; }

		//"," ownedResults+=ParameterDeclarationCS
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//ownedResults+=ParameterDeclarationCS
		public Assignment getOwnedResultsAssignment_6_2_1() { return cOwnedResultsAssignment_6_2_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedResultsParameterDeclarationCSParserRuleCall_6_2_1_0() { return cOwnedResultsParameterDeclarationCSParserRuleCall_6_2_1_0; }
	}

	public class HelperDefinitionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelperDefinitionCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHelperSimpleDefinitionCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHelperCompoundDefinitionCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HelperDefinitionCS returns HelperOperationCS:
		//	HelperSimpleDefinitionCS | HelperCompoundDefinitionCS;
		@Override public ParserRule getRule() { return rule; }

		//HelperSimpleDefinitionCS | HelperCompoundDefinitionCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//HelperSimpleDefinitionCS
		public RuleCall getHelperSimpleDefinitionCSParserRuleCall_0() { return cHelperSimpleDefinitionCSParserRuleCall_0; }

		//HelperCompoundDefinitionCS
		public RuleCall getHelperCompoundDefinitionCSParserRuleCall_1() { return cHelperCompoundDefinitionCSParserRuleCall_1; }
	}

	public class HelperSimpleDefinitionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelperSimpleDefinitionCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHelperHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedBodySimpleOperationBodyCSParserRuleCall_1_0 = (RuleCall)cOwnedBodyAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//HelperSimpleDefinitionCS returns HelperOperationCS:
		//	HelperHeaderCS ownedBody=SimpleOperationBodyCS ";";
		@Override public ParserRule getRule() { return rule; }

		//HelperHeaderCS ownedBody=SimpleOperationBodyCS ";"
		public Group getGroup() { return cGroup; }

		//HelperHeaderCS
		public RuleCall getHelperHeaderCSParserRuleCall_0() { return cHelperHeaderCSParserRuleCall_0; }

		//ownedBody=SimpleOperationBodyCS
		public Assignment getOwnedBodyAssignment_1() { return cOwnedBodyAssignment_1; }

		//SimpleOperationBodyCS
		public RuleCall getOwnedBodySimpleOperationBodyCSParserRuleCall_1_0() { return cOwnedBodySimpleOperationBodyCSParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class HelperCompoundDefinitionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelperCompoundDefinitionCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHelperHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedBodyCompoundOperationBodyCSParserRuleCall_1_0 = (RuleCall)cOwnedBodyAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//HelperCompoundDefinitionCS returns HelperOperationCS:
		//	HelperHeaderCS ownedBody=CompoundOperationBodyCS ";"?;
		@Override public ParserRule getRule() { return rule; }

		//HelperHeaderCS ownedBody=CompoundOperationBodyCS ";"?
		public Group getGroup() { return cGroup; }

		//HelperHeaderCS
		public RuleCall getHelperHeaderCSParserRuleCall_0() { return cHelperHeaderCSParserRuleCall_0; }

		//ownedBody=CompoundOperationBodyCS
		public Assignment getOwnedBodyAssignment_1() { return cOwnedBodyAssignment_1; }

		//CompoundOperationBodyCS
		public RuleCall getOwnedBodyCompoundOperationBodyCSParserRuleCall_1_0() { return cOwnedBodyCompoundOperationBodyCSParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cOwnedUnitRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOwnedUnitRefUnitRefCSParserRuleCall_0_1_0 = (RuleCall)cOwnedUnitRefAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedUnitRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedUnitRefUnitRefCSParserRuleCall_1_1_0 = (RuleCall)cOwnedUnitRefAssignment_1_1.eContents().get(0);
		private final Keyword cImportKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cAlternatives_1_3.eContents().get(0);
		private final Assignment cImportedUnitElementAssignment_1_3_0_0 = (Assignment)cGroup_1_3_0.eContents().get(0);
		private final RuleCall cImportedUnitElementIdentifierParserRuleCall_1_3_0_0_0 = (RuleCall)cImportedUnitElementAssignment_1_3_0_0.eContents().get(0);
		private final Group cGroup_1_3_0_1 = (Group)cGroup_1_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_0_1_0 = (Keyword)cGroup_1_3_0_1.eContents().get(0);
		private final Assignment cImportedUnitElementAssignment_1_3_0_1_1 = (Assignment)cGroup_1_3_0_1.eContents().get(1);
		private final RuleCall cImportedUnitElementIdentifierParserRuleCall_1_3_0_1_1_0 = (RuleCall)cImportedUnitElementAssignment_1_3_0_1_1.eContents().get(0);
		private final Assignment cIsAllAssignment_1_3_1 = (Assignment)cAlternatives_1_3.eContents().get(1);
		private final Keyword cIsAllAsteriskKeyword_1_3_1_0 = (Keyword)cIsAllAssignment_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ImportCS returns QVToImportCS:
		//	"import" ownedUnitRef=UnitRefCS ";" | "from" ownedUnitRef=UnitRefCS "import" (importedUnitElement+=Identifier (","
		//	importedUnitElement+=Identifier)* | isAll?="*") ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" ownedUnitRef=UnitRefCS ";" | "from" ownedUnitRef=UnitRefCS "import" (importedUnitElement+=Identifier (","
		//importedUnitElement+=Identifier)* | isAll?="*") ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"import" ownedUnitRef=UnitRefCS ";"
		public Group getGroup_0() { return cGroup_0; }

		//"import"
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }

		//ownedUnitRef=UnitRefCS
		public Assignment getOwnedUnitRefAssignment_0_1() { return cOwnedUnitRefAssignment_0_1; }

		//UnitRefCS
		public RuleCall getOwnedUnitRefUnitRefCSParserRuleCall_0_1_0() { return cOwnedUnitRefUnitRefCSParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//"from" ownedUnitRef=UnitRefCS "import" (importedUnitElement+=Identifier ("," importedUnitElement+=Identifier)* |
		//isAll?="*") ";"
		public Group getGroup_1() { return cGroup_1; }

		//"from"
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }

		//ownedUnitRef=UnitRefCS
		public Assignment getOwnedUnitRefAssignment_1_1() { return cOwnedUnitRefAssignment_1_1; }

		//UnitRefCS
		public RuleCall getOwnedUnitRefUnitRefCSParserRuleCall_1_1_0() { return cOwnedUnitRefUnitRefCSParserRuleCall_1_1_0; }

		//"import"
		public Keyword getImportKeyword_1_2() { return cImportKeyword_1_2; }

		//importedUnitElement+=Identifier ("," importedUnitElement+=Identifier)* | isAll?="*"
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }

		//importedUnitElement+=Identifier ("," importedUnitElement+=Identifier)*
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//importedUnitElement+=Identifier
		public Assignment getImportedUnitElementAssignment_1_3_0_0() { return cImportedUnitElementAssignment_1_3_0_0; }

		//Identifier
		public RuleCall getImportedUnitElementIdentifierParserRuleCall_1_3_0_0_0() { return cImportedUnitElementIdentifierParserRuleCall_1_3_0_0_0; }

		//("," importedUnitElement+=Identifier)*
		public Group getGroup_1_3_0_1() { return cGroup_1_3_0_1; }

		//","
		public Keyword getCommaKeyword_1_3_0_1_0() { return cCommaKeyword_1_3_0_1_0; }

		//importedUnitElement+=Identifier
		public Assignment getImportedUnitElementAssignment_1_3_0_1_1() { return cImportedUnitElementAssignment_1_3_0_1_1; }

		//Identifier
		public RuleCall getImportedUnitElementIdentifierParserRuleCall_1_3_0_1_1_0() { return cImportedUnitElementIdentifierParserRuleCall_1_3_0_1_1_0; }

		//isAll?="*"
		public Assignment getIsAllAssignment_1_3_1() { return cIsAllAssignment_1_3_1; }

		//"*"
		public Keyword getIsAllAsteriskKeyword_1_3_1_0() { return cIsAllAsteriskKeyword_1_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}

	public class InitPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitPartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitOpInitOpCSEnumRuleCall_0_0 = (RuleCall)cInitOpAssignment_0.eContents().get(0);
		private final Assignment cOwnedExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedExpExpCSParserRuleCall_1_0 = (RuleCall)cOwnedExpAssignment_1.eContents().get(0);
		
		//InitPartCS:
		//	initOp=InitOpCS ownedExp=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//initOp=InitOpCS ownedExp=ExpCS
		public Group getGroup() { return cGroup; }

		//initOp=InitOpCS
		public Assignment getInitOpAssignment_0() { return cInitOpAssignment_0; }

		//InitOpCS
		public RuleCall getInitOpInitOpCSEnumRuleCall_0_0() { return cInitOpInitOpCSEnumRuleCall_0_0; }

		//ownedExp=ExpCS
		public Assignment getOwnedExpAssignment_1() { return cOwnedExpAssignment_1; }

		//ExpCS
		public RuleCall getOwnedExpExpCSParserRuleCall_1_0() { return cOwnedExpExpCSParserRuleCall_1_0; }
	}

	public class LibraryCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibraryDeclCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibraryDefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LibraryCS returns QVToLibraryCS:
		//	LibraryDeclCS | LibraryDefCS;
		@Override public ParserRule getRule() { return rule; }

		//LibraryDeclCS | LibraryDefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//LibraryDeclCS
		public RuleCall getLibraryDeclCSParserRuleCall_0() { return cLibraryDeclCSParserRuleCall_0; }

		//LibraryDefCS
		public RuleCall getLibraryDefCSParserRuleCall_1() { return cLibraryDefCSParserRuleCall_1; }
	}

	public class LibraryDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLibraryHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LibraryDeclCS returns QVToLibraryCS:
		//	LibraryHeaderCS ";";
		@Override public ParserRule getRule() { return rule; }

		//LibraryHeaderCS ";"
		public Group getGroup() { return cGroup; }

		//LibraryHeaderCS
		public RuleCall getLibraryHeaderCSParserRuleCall_0() { return cLibraryHeaderCSParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class LibraryDefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryDefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLibraryHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOwnedPropertiesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOwnedPropertiesModulePropertyCSParserRuleCall_2_0_0 = (RuleCall)cOwnedPropertiesAssignment_2_0.eContents().get(0);
		private final Assignment cOwnedOperationsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedOperationsModuleOperationCSParserRuleCall_2_1_0 = (RuleCall)cOwnedOperationsAssignment_2_1.eContents().get(0);
		private final Assignment cOwnedAnnotationsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cOwnedAnnotationsTagCSParserRuleCall_2_2_0 = (RuleCall)cOwnedAnnotationsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LibraryDefCS returns QVToLibraryCS:
		//	LibraryHeaderCS "{" (ownedProperties+=ModulePropertyCS | ownedOperations+=ModuleOperationCS |
		//	ownedAnnotations+=TagCS)* "}" ";"?;
		@Override public ParserRule getRule() { return rule; }

		//LibraryHeaderCS "{" (ownedProperties+=ModulePropertyCS | ownedOperations+=ModuleOperationCS | ownedAnnotations+=TagCS)*
		//"}" ";"?
		public Group getGroup() { return cGroup; }

		//LibraryHeaderCS
		public RuleCall getLibraryHeaderCSParserRuleCall_0() { return cLibraryHeaderCSParserRuleCall_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(ownedProperties+=ModulePropertyCS | ownedOperations+=ModuleOperationCS | ownedAnnotations+=TagCS)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ownedProperties+=ModulePropertyCS
		public Assignment getOwnedPropertiesAssignment_2_0() { return cOwnedPropertiesAssignment_2_0; }

		//ModulePropertyCS
		public RuleCall getOwnedPropertiesModulePropertyCSParserRuleCall_2_0_0() { return cOwnedPropertiesModulePropertyCSParserRuleCall_2_0_0; }

		//ownedOperations+=ModuleOperationCS
		public Assignment getOwnedOperationsAssignment_2_1() { return cOwnedOperationsAssignment_2_1; }

		//ModuleOperationCS
		public RuleCall getOwnedOperationsModuleOperationCSParserRuleCall_2_1_0() { return cOwnedOperationsModuleOperationCSParserRuleCall_2_1_0; }

		//ownedAnnotations+=TagCS
		public Assignment getOwnedAnnotationsAssignment_2_2() { return cOwnedAnnotationsAssignment_2_2; }

		//TagCS
		public RuleCall getOwnedAnnotationsTagCSParserRuleCall_2_2_0() { return cOwnedAnnotationsTagCSParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class LibraryHeaderCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryHeaderCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedQualifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedQualifiersLibraryQualifierParserRuleCall_0_0 = (RuleCall)cOwnedQualifiersAssignment_0.eContents().get(0);
		private final Keyword cLibraryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedParametersModelTypeRefCSParserRuleCall_4_0 = (RuleCall)cOwnedParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedParametersModelTypeRefCSParserRuleCall_5_1_0 = (RuleCall)cOwnedParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOwnedModuleUsagesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOwnedModuleUsagesModuleUsageCSParserRuleCall_7_0 = (RuleCall)cOwnedModuleUsagesAssignment_7.eContents().get(0);
		
		//LibraryHeaderCS returns QVToLibraryCS:
		//	ownedQualifiers+=LibraryQualifier* "library" name=UnrestrictedName "(" ownedParameters+=ModelTypeRefCS (","
		//	ownedParameters+=ModelTypeRefCS)* ")" ownedModuleUsages+=ModuleUsageCS*;
		@Override public ParserRule getRule() { return rule; }

		//ownedQualifiers+=LibraryQualifier* "library" name=UnrestrictedName "(" ownedParameters+=ModelTypeRefCS (","
		//ownedParameters+=ModelTypeRefCS)* ")" ownedModuleUsages+=ModuleUsageCS*
		public Group getGroup() { return cGroup; }

		//ownedQualifiers+=LibraryQualifier*
		public Assignment getOwnedQualifiersAssignment_0() { return cOwnedQualifiersAssignment_0; }

		//LibraryQualifier
		public RuleCall getOwnedQualifiersLibraryQualifierParserRuleCall_0_0() { return cOwnedQualifiersLibraryQualifierParserRuleCall_0_0; }

		//"library"
		public Keyword getLibraryKeyword_1() { return cLibraryKeyword_1; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_2_0() { return cNameUnrestrictedNameParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//ownedParameters+=ModelTypeRefCS
		public Assignment getOwnedParametersAssignment_4() { return cOwnedParametersAssignment_4; }

		//ModelTypeRefCS
		public RuleCall getOwnedParametersModelTypeRefCSParserRuleCall_4_0() { return cOwnedParametersModelTypeRefCSParserRuleCall_4_0; }

		//("," ownedParameters+=ModelTypeRefCS)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ownedParameters+=ModelTypeRefCS
		public Assignment getOwnedParametersAssignment_5_1() { return cOwnedParametersAssignment_5_1; }

		//ModelTypeRefCS
		public RuleCall getOwnedParametersModelTypeRefCSParserRuleCall_5_1_0() { return cOwnedParametersModelTypeRefCSParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//ownedModuleUsages+=ModuleUsageCS*
		public Assignment getOwnedModuleUsagesAssignment_7() { return cOwnedModuleUsagesAssignment_7; }

		//ModuleUsageCS
		public RuleCall getOwnedModuleUsagesModuleUsageCSParserRuleCall_7_0() { return cOwnedModuleUsagesModuleUsageCSParserRuleCall_7_0; }
	}

	public class MappingBodyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingBodyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingBodyCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInitKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedInitExpsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedInitExpsExpCSParserRuleCall_1_2_0 = (RuleCall)cOwnedInitExpsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cHasPopulationKeywordAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cHasPopulationKeywordPopulationKeyword_2_0_0_0 = (Keyword)cHasPopulationKeywordAssignment_2_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cOwnedContentExpsAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cOwnedContentExpsExpCSParserRuleCall_2_0_2_0 = (RuleCall)cOwnedContentExpsAssignment_2_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cOwnedContentExpsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedContentExpsExpCSParserRuleCall_2_1_0 = (RuleCall)cOwnedContentExpsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOwnedEndExpsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOwnedEndExpsExpCSParserRuleCall_3_2_0 = (RuleCall)cOwnedEndExpsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//MappingBodyCS:
		//	{MappingBodyCS} ("init" "{" ownedInitExps+=ExpCS "}")? (hasPopulationKeyword?="population"? "{"
		//	ownedContentExps+=ExpCS* "}" | ownedContentExps+=ExpCS) ("end" "{" ownedEndExps+=ExpCS "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{MappingBodyCS} ("init" "{" ownedInitExps+=ExpCS "}")? (hasPopulationKeyword?="population"? "{" ownedContentExps+=ExpCS*
		//"}" | ownedContentExps+=ExpCS) ("end" "{" ownedEndExps+=ExpCS "}")?
		public Group getGroup() { return cGroup; }

		//{MappingBodyCS}
		public Action getMappingBodyCSAction_0() { return cMappingBodyCSAction_0; }

		//("init" "{" ownedInitExps+=ExpCS "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"init"
		public Keyword getInitKeyword_1_0() { return cInitKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//ownedInitExps+=ExpCS
		public Assignment getOwnedInitExpsAssignment_1_2() { return cOwnedInitExpsAssignment_1_2; }

		//ExpCS
		public RuleCall getOwnedInitExpsExpCSParserRuleCall_1_2_0() { return cOwnedInitExpsExpCSParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//hasPopulationKeyword?="population"? "{" ownedContentExps+=ExpCS* "}" | ownedContentExps+=ExpCS
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//hasPopulationKeyword?="population"? "{" ownedContentExps+=ExpCS* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//hasPopulationKeyword?="population"?
		public Assignment getHasPopulationKeywordAssignment_2_0_0() { return cHasPopulationKeywordAssignment_2_0_0; }

		//"population"
		public Keyword getHasPopulationKeywordPopulationKeyword_2_0_0_0() { return cHasPopulationKeywordPopulationKeyword_2_0_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_1() { return cLeftCurlyBracketKeyword_2_0_1; }

		//ownedContentExps+=ExpCS*
		public Assignment getOwnedContentExpsAssignment_2_0_2() { return cOwnedContentExpsAssignment_2_0_2; }

		//ExpCS
		public RuleCall getOwnedContentExpsExpCSParserRuleCall_2_0_2_0() { return cOwnedContentExpsExpCSParserRuleCall_2_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_3() { return cRightCurlyBracketKeyword_2_0_3; }

		//ownedContentExps+=ExpCS
		public Assignment getOwnedContentExpsAssignment_2_1() { return cOwnedContentExpsAssignment_2_1; }

		//ExpCS
		public RuleCall getOwnedContentExpsExpCSParserRuleCall_2_1_0() { return cOwnedContentExpsExpCSParserRuleCall_2_1_0; }

		//("end" "{" ownedEndExps+=ExpCS "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"end"
		public Keyword getEndKeyword_3_0() { return cEndKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//ownedEndExps+=ExpCS
		public Assignment getOwnedEndExpsAssignment_3_2() { return cOwnedEndExpsAssignment_3_2; }

		//ExpCS
		public RuleCall getOwnedEndExpsExpCSParserRuleCall_3_2_0() { return cOwnedEndExpsExpCSParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class MappingCallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingCallExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cIsStrictAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsStrictXmapKeyword_0_1_0 = (Keyword)cIsStrictAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedPathNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPathNamePathNameCSParserRuleCall_1_0 = (RuleCall)cOwnedPathNameAssignment_1.eContents().get(0);
		private final Assignment cOwnedRoundBracketedClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRoundBracketedClauseRoundBracketedClauseCSParserRuleCall_2_0 = (RuleCall)cOwnedRoundBracketedClauseAssignment_2.eContents().get(0);
		
		//// FIXME OMG: the following seems wrong
		//
		//// "Note that the omission of the source is a shorthand in terms of the execution semantics - the source is the transformation
		//
		//// class itself, denoted by ‘this,’ but not in terms of the metamodel representation: the OperationCallExp::source
		//
		//// property may be left empty."
		// // 
		//
		//// The invoked operation call should refer (as a source) to the transformation/class in which the call took place
		// //
		//
		//// also ImperativeCallExp::isVirtual doesn't seem to be needed, as this concern should belong to OCL. In OCL, an operation call
		//
		//// can also statically refer to a declared operation, otherwise it needs to be dynamically dispatched. 
		// //
		//
		//// ImperativeCallExpCS: NameExpCS;
		// MappingCallExpCS:
		//	("map" | isStrict?="xmap") ownedPathName=PathNameCS ownedRoundBracketedClause=RoundBracketedClauseCS;
		@Override public ParserRule getRule() { return rule; }

		//("map" | isStrict?="xmap") ownedPathName=PathNameCS ownedRoundBracketedClause=RoundBracketedClauseCS
		public Group getGroup() { return cGroup; }

		//"map" | isStrict?="xmap"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"map"
		public Keyword getMapKeyword_0_0() { return cMapKeyword_0_0; }

		//isStrict?="xmap"
		public Assignment getIsStrictAssignment_0_1() { return cIsStrictAssignment_0_1; }

		//"xmap"
		public Keyword getIsStrictXmapKeyword_0_1_0() { return cIsStrictXmapKeyword_0_1_0; }

		//ownedPathName=PathNameCS
		public Assignment getOwnedPathNameAssignment_1() { return cOwnedPathNameAssignment_1; }

		//PathNameCS
		public RuleCall getOwnedPathNamePathNameCSParserRuleCall_1_0() { return cOwnedPathNamePathNameCSParserRuleCall_1_0; }

		//ownedRoundBracketedClause=RoundBracketedClauseCS
		public Assignment getOwnedRoundBracketedClauseAssignment_2() { return cOwnedRoundBracketedClauseAssignment_2; }

		//RoundBracketedClauseCS
		public RuleCall getOwnedRoundBracketedClauseRoundBracketedClauseCSParserRuleCall_2_0() { return cOwnedRoundBracketedClauseRoundBracketedClauseCSParserRuleCall_2_0; }
	}

	public class MappingOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingOperationCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMappingDeclarationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingDefinitionCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MappingOperationCS:
		//	MappingDeclarationCS | MappingDefinitionCS;
		@Override public ParserRule getRule() { return rule; }

		//MappingDeclarationCS | MappingDefinitionCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//MappingDeclarationCS
		public RuleCall getMappingDeclarationCSParserRuleCall_0() { return cMappingDeclarationCSParserRuleCall_0; }

		//MappingDefinitionCS
		public RuleCall getMappingDefinitionCSParserRuleCall_1() { return cMappingDefinitionCSParserRuleCall_1; }
	}

	public class MappingDeclarationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingDeclarationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMappingOperationHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MappingDeclarationCS returns MappingOperationCS:
		//	MappingOperationHeaderCS ";";
		@Override public ParserRule getRule() { return rule; }

		//MappingOperationHeaderCS ";"
		public Group getGroup() { return cGroup; }

		//MappingOperationHeaderCS
		public RuleCall getMappingOperationHeaderCSParserRuleCall_0() { return cMappingOperationHeaderCSParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class MappingDefinitionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingDefinitionCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMappingOperationHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedBodyMappingBodyCSParserRuleCall_2_0 = (RuleCall)cOwnedBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MappingDefinitionCS returns MappingOperationCS:
		//	MappingOperationHeaderCS "{" ownedBody=MappingBodyCS "}";
		@Override public ParserRule getRule() { return rule; }

		//MappingOperationHeaderCS "{" ownedBody=MappingBodyCS "}"
		public Group getGroup() { return cGroup; }

		//MappingOperationHeaderCS
		public RuleCall getMappingOperationHeaderCSParserRuleCall_0() { return cMappingOperationHeaderCSParserRuleCall_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ownedBody=MappingBodyCS
		public Assignment getOwnedBodyAssignment_2() { return cOwnedBodyAssignment_2; }

		//MappingBodyCS
		public RuleCall getOwnedBodyMappingBodyCSParserRuleCall_2_0() { return cOwnedBodyMappingBodyCSParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MappingOperationHeaderCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingOperationHeaderCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiersOperationQualifierParserRuleCall_0_0 = (RuleCall)cQualifiersAssignment_0.eContents().get(0);
		private final Keyword cMappingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionDirectionKindCSEnumRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Assignment cOwnedScopedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedScopedNamePathName2CSParserRuleCall_3_0 = (RuleCall)cOwnedScopedNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOwnedParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_5_0_0 = (RuleCall)cOwnedParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_5_1_1_0 = (RuleCall)cOwnedParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOwnedResultsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOwnedResultsParameterDeclarationCSParserRuleCall_7_1_0 = (RuleCall)cOwnedResultsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cOwnedResultsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cOwnedResultsParameterDeclarationCSParserRuleCall_7_2_1_0 = (RuleCall)cOwnedResultsAssignment_7_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_8 = (UnorderedGroup)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cUnorderedGroup_8.eContents().get(0);
		private final Keyword cInheritsKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cOwnedInheritRefsAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cOwnedInheritRefsOperationRefCSParserRuleCall_8_0_1_0 = (RuleCall)cOwnedInheritRefsAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_0_2 = (Group)cGroup_8_0.eContents().get(2);
		private final Keyword cCommaKeyword_8_0_2_0 = (Keyword)cGroup_8_0_2.eContents().get(0);
		private final Assignment cOwnedInheritRefsAssignment_8_0_2_1 = (Assignment)cGroup_8_0_2.eContents().get(1);
		private final RuleCall cOwnedInheritRefsOperationRefCSParserRuleCall_8_0_2_1_0 = (RuleCall)cOwnedInheritRefsAssignment_8_0_2_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cUnorderedGroup_8.eContents().get(1);
		private final Keyword cMergesKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cOwnedMergeRefsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cOwnedMergeRefsOperationRefCSParserRuleCall_8_1_1_0 = (RuleCall)cOwnedMergeRefsAssignment_8_1_1.eContents().get(0);
		private final Group cGroup_8_1_2 = (Group)cGroup_8_1.eContents().get(2);
		private final Keyword cCommaKeyword_8_1_2_0 = (Keyword)cGroup_8_1_2.eContents().get(0);
		private final Assignment cOwnedMergeRefsAssignment_8_1_2_1 = (Assignment)cGroup_8_1_2.eContents().get(1);
		private final RuleCall cOwnedMergeRefsOperationRefCSParserRuleCall_8_1_2_1_0 = (RuleCall)cOwnedMergeRefsAssignment_8_1_2_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cUnorderedGroup_8.eContents().get(2);
		private final Keyword cDisjunctsKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cOwnedDisjunctRefsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cOwnedDisjunctRefsOperationRefCSParserRuleCall_8_2_1_0 = (RuleCall)cOwnedDisjunctRefsAssignment_8_2_1.eContents().get(0);
		private final Group cGroup_8_2_2 = (Group)cGroup_8_2.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_2_0 = (Keyword)cGroup_8_2_2.eContents().get(0);
		private final Assignment cOwnedDisjunctRefsAssignment_8_2_2_1 = (Assignment)cGroup_8_2_2.eContents().get(1);
		private final RuleCall cOwnedDisjunctRefsOperationRefCSParserRuleCall_8_2_2_1_0 = (RuleCall)cOwnedDisjunctRefsAssignment_8_2_2_1.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cUnorderedGroup_8.eContents().get(3);
		private final Keyword cRefinesKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cOwnedRefinedRuleAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cOwnedRefinedRulePathName2CSParserRuleCall_8_3_1_0 = (RuleCall)cOwnedRefinedRuleAssignment_8_3_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWhenKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cOwnedWhenExpsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cOwnedWhenExpsExpCSParserRuleCall_9_2_0 = (RuleCall)cOwnedWhenExpsAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cWhereKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cOwnedWhereExpsAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cOwnedWhereExpsExpressionBlockCSParserRuleCall_10_2_0 = (RuleCall)cOwnedWhereExpsAssignment_10_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		
		//MappingOperationHeaderCS returns MappingOperationCS:
		//	qualifiers+=OperationQualifier* "mapping" direction=DirectionKindCS? ownedScopedName=PathName2CS "("
		//	(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)? ")" (":"
		//	ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))? (("inherits"
		//	ownedInheritRefs+=OperationRefCS ("," ownedInheritRefs+=OperationRefCS)*)? & ("merges" ownedMergeRefs+=OperationRefCS
		//	("," ownedMergeRefs+=OperationRefCS)*)? & ("disjuncts" ownedDisjunctRefs+=OperationRefCS (","
		//	ownedDisjunctRefs+=OperationRefCS)*)? & ("refines" ownedRefinedRule=PathName2CS)?) ("when" "{" ownedWhenExps+=ExpCS*
		//	"}")? ("where" "{" ownedWhereExps+=ExpressionBlockCS* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//qualifiers+=OperationQualifier* "mapping" direction=DirectionKindCS? ownedScopedName=PathName2CS "("
		//(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)? ")" (":"
		//ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))? (("inherits"
		//ownedInheritRefs+=OperationRefCS ("," ownedInheritRefs+=OperationRefCS)*)? & ("merges" ownedMergeRefs+=OperationRefCS
		//("," ownedMergeRefs+=OperationRefCS)*)? & ("disjuncts" ownedDisjunctRefs+=OperationRefCS (","
		//ownedDisjunctRefs+=OperationRefCS)*)? & ("refines" ownedRefinedRule=PathName2CS)?) ("when" "{" ownedWhenExps+=ExpCS*
		//"}")? ("where" "{" ownedWhereExps+=ExpressionBlockCS* "}")?
		public Group getGroup() { return cGroup; }

		//qualifiers+=OperationQualifier*
		public Assignment getQualifiersAssignment_0() { return cQualifiersAssignment_0; }

		//OperationQualifier
		public RuleCall getQualifiersOperationQualifierParserRuleCall_0_0() { return cQualifiersOperationQualifierParserRuleCall_0_0; }

		//"mapping"
		public Keyword getMappingKeyword_1() { return cMappingKeyword_1; }

		//direction=DirectionKindCS?
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }

		//DirectionKindCS
		public RuleCall getDirectionDirectionKindCSEnumRuleCall_2_0() { return cDirectionDirectionKindCSEnumRuleCall_2_0; }

		//ownedScopedName=PathName2CS
		public Assignment getOwnedScopedNameAssignment_3() { return cOwnedScopedNameAssignment_3; }

		//PathName2CS
		public RuleCall getOwnedScopedNamePathName2CSParserRuleCall_3_0() { return cOwnedScopedNamePathName2CSParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)?
		public Group getGroup_5() { return cGroup_5; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_5_0() { return cOwnedParametersAssignment_5_0; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_5_0_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_5_0_0; }

		//("," ownedParameters+=ParameterDeclarationCS)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_5_1_1() { return cOwnedParametersAssignment_5_1_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_5_1_1_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//(":" ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))?
		public Group getGroup_7() { return cGroup_7; }

		//":"
		public Keyword getColonKeyword_7_0() { return cColonKeyword_7_0; }

		//ownedResults+=ParameterDeclarationCS
		public Assignment getOwnedResultsAssignment_7_1() { return cOwnedResultsAssignment_7_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedResultsParameterDeclarationCSParserRuleCall_7_1_0() { return cOwnedResultsParameterDeclarationCSParserRuleCall_7_1_0; }

		//"," ownedResults+=ParameterDeclarationCS
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//ownedResults+=ParameterDeclarationCS
		public Assignment getOwnedResultsAssignment_7_2_1() { return cOwnedResultsAssignment_7_2_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedResultsParameterDeclarationCSParserRuleCall_7_2_1_0() { return cOwnedResultsParameterDeclarationCSParserRuleCall_7_2_1_0; }

		//("inherits" ownedInheritRefs+=OperationRefCS ("," ownedInheritRefs+=OperationRefCS)*)? & ("merges"
		//ownedMergeRefs+=OperationRefCS ("," ownedMergeRefs+=OperationRefCS)*)? & ("disjuncts"
		//ownedDisjunctRefs+=OperationRefCS ("," ownedDisjunctRefs+=OperationRefCS)*)? & ("refines"
		//ownedRefinedRule=PathName2CS)?
		public UnorderedGroup getUnorderedGroup_8() { return cUnorderedGroup_8; }

		//("inherits" ownedInheritRefs+=OperationRefCS ("," ownedInheritRefs+=OperationRefCS)*)?
		public Group getGroup_8_0() { return cGroup_8_0; }

		//"inherits"
		public Keyword getInheritsKeyword_8_0_0() { return cInheritsKeyword_8_0_0; }

		//ownedInheritRefs+=OperationRefCS
		public Assignment getOwnedInheritRefsAssignment_8_0_1() { return cOwnedInheritRefsAssignment_8_0_1; }

		//OperationRefCS
		public RuleCall getOwnedInheritRefsOperationRefCSParserRuleCall_8_0_1_0() { return cOwnedInheritRefsOperationRefCSParserRuleCall_8_0_1_0; }

		//("," ownedInheritRefs+=OperationRefCS)*
		public Group getGroup_8_0_2() { return cGroup_8_0_2; }

		//","
		public Keyword getCommaKeyword_8_0_2_0() { return cCommaKeyword_8_0_2_0; }

		//ownedInheritRefs+=OperationRefCS
		public Assignment getOwnedInheritRefsAssignment_8_0_2_1() { return cOwnedInheritRefsAssignment_8_0_2_1; }

		//OperationRefCS
		public RuleCall getOwnedInheritRefsOperationRefCSParserRuleCall_8_0_2_1_0() { return cOwnedInheritRefsOperationRefCSParserRuleCall_8_0_2_1_0; }

		//("merges" ownedMergeRefs+=OperationRefCS ("," ownedMergeRefs+=OperationRefCS)*)?
		public Group getGroup_8_1() { return cGroup_8_1; }

		//"merges"
		public Keyword getMergesKeyword_8_1_0() { return cMergesKeyword_8_1_0; }

		//ownedMergeRefs+=OperationRefCS
		public Assignment getOwnedMergeRefsAssignment_8_1_1() { return cOwnedMergeRefsAssignment_8_1_1; }

		//OperationRefCS
		public RuleCall getOwnedMergeRefsOperationRefCSParserRuleCall_8_1_1_0() { return cOwnedMergeRefsOperationRefCSParserRuleCall_8_1_1_0; }

		//("," ownedMergeRefs+=OperationRefCS)*
		public Group getGroup_8_1_2() { return cGroup_8_1_2; }

		//","
		public Keyword getCommaKeyword_8_1_2_0() { return cCommaKeyword_8_1_2_0; }

		//ownedMergeRefs+=OperationRefCS
		public Assignment getOwnedMergeRefsAssignment_8_1_2_1() { return cOwnedMergeRefsAssignment_8_1_2_1; }

		//OperationRefCS
		public RuleCall getOwnedMergeRefsOperationRefCSParserRuleCall_8_1_2_1_0() { return cOwnedMergeRefsOperationRefCSParserRuleCall_8_1_2_1_0; }

		//("disjuncts" ownedDisjunctRefs+=OperationRefCS ("," ownedDisjunctRefs+=OperationRefCS)*)?
		public Group getGroup_8_2() { return cGroup_8_2; }

		//"disjuncts"
		public Keyword getDisjunctsKeyword_8_2_0() { return cDisjunctsKeyword_8_2_0; }

		//ownedDisjunctRefs+=OperationRefCS
		public Assignment getOwnedDisjunctRefsAssignment_8_2_1() { return cOwnedDisjunctRefsAssignment_8_2_1; }

		//OperationRefCS
		public RuleCall getOwnedDisjunctRefsOperationRefCSParserRuleCall_8_2_1_0() { return cOwnedDisjunctRefsOperationRefCSParserRuleCall_8_2_1_0; }

		//("," ownedDisjunctRefs+=OperationRefCS)*
		public Group getGroup_8_2_2() { return cGroup_8_2_2; }

		//","
		public Keyword getCommaKeyword_8_2_2_0() { return cCommaKeyword_8_2_2_0; }

		//ownedDisjunctRefs+=OperationRefCS
		public Assignment getOwnedDisjunctRefsAssignment_8_2_2_1() { return cOwnedDisjunctRefsAssignment_8_2_2_1; }

		//OperationRefCS
		public RuleCall getOwnedDisjunctRefsOperationRefCSParserRuleCall_8_2_2_1_0() { return cOwnedDisjunctRefsOperationRefCSParserRuleCall_8_2_2_1_0; }

		//("refines" ownedRefinedRule=PathName2CS)?
		public Group getGroup_8_3() { return cGroup_8_3; }

		//"refines"
		public Keyword getRefinesKeyword_8_3_0() { return cRefinesKeyword_8_3_0; }

		//ownedRefinedRule=PathName2CS
		public Assignment getOwnedRefinedRuleAssignment_8_3_1() { return cOwnedRefinedRuleAssignment_8_3_1; }

		//PathName2CS
		public RuleCall getOwnedRefinedRulePathName2CSParserRuleCall_8_3_1_0() { return cOwnedRefinedRulePathName2CSParserRuleCall_8_3_1_0; }

		//("when" "{" ownedWhenExps+=ExpCS* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"when"
		public Keyword getWhenKeyword_9_0() { return cWhenKeyword_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//ownedWhenExps+=ExpCS*
		public Assignment getOwnedWhenExpsAssignment_9_2() { return cOwnedWhenExpsAssignment_9_2; }

		//ExpCS
		public RuleCall getOwnedWhenExpsExpCSParserRuleCall_9_2_0() { return cOwnedWhenExpsExpCSParserRuleCall_9_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }

		//("where" "{" ownedWhereExps+=ExpressionBlockCS* "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"where"
		public Keyword getWhereKeyword_10_0() { return cWhereKeyword_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }

		//ownedWhereExps+=ExpressionBlockCS*
		public Assignment getOwnedWhereExpsAssignment_10_2() { return cOwnedWhereExpsAssignment_10_2; }

		//ExpressionBlockCS
		public RuleCall getOwnedWhereExpsExpressionBlockCSParserRuleCall_10_2_0() { return cOwnedWhereExpsExpressionBlockCSParserRuleCall_10_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_3() { return cRightCurlyBracketKeyword_10_3; }
	}

	public class MetamodelCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetamodelKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetamodelKindMetamodelKindCSEnumRuleCall_0_0 = (RuleCall)cMetamodelKindAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedClassesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedClassesClassCSParserRuleCall_3_0_0 = (RuleCall)cOwnedClassesAssignment_3_0.eContents().get(0);
		private final Assignment cOwnedClassesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOwnedClassesEnumerationCSParserRuleCall_3_1_0 = (RuleCall)cOwnedClassesAssignment_3_1.eContents().get(0);
		private final Assignment cOwnedAnnotationsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cOwnedAnnotationsTagCSParserRuleCall_3_2_0 = (RuleCall)cOwnedAnnotationsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// MetamodelKind provides extra semantic, we need to retain the kind 
		// MetamodelCS:
		//	metamodelKind=MetamodelKindCS name=UnrestrictedName "{" (ownedClasses+=ClassCS
		//	// FIXME QVTo grammar distincts classifier from enumeration
		// | ownedClasses+=EnumerationCS |
		//	ownedAnnotations+=TagCS)* "}" ";"?;
		@Override public ParserRule getRule() { return rule; }

		//metamodelKind=MetamodelKindCS name=UnrestrictedName "{" (ownedClasses+=ClassCS
		//// FIXME QVTo grammar distincts classifier from enumeration
		// | ownedClasses+=EnumerationCS | ownedAnnotations+=TagCS)*
		//"}" ";"?
		public Group getGroup() { return cGroup; }

		//metamodelKind=MetamodelKindCS
		public Assignment getMetamodelKindAssignment_0() { return cMetamodelKindAssignment_0; }

		//MetamodelKindCS
		public RuleCall getMetamodelKindMetamodelKindCSEnumRuleCall_0_0() { return cMetamodelKindMetamodelKindCSEnumRuleCall_0_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(ownedClasses+=ClassCS // FIXME QVTo grammar distincts classifier from enumeration
		// | ownedClasses+=EnumerationCS |
		//ownedAnnotations+=TagCS)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedClasses+=ClassCS
		public Assignment getOwnedClassesAssignment_3_0() { return cOwnedClassesAssignment_3_0; }

		//ClassCS
		public RuleCall getOwnedClassesClassCSParserRuleCall_3_0_0() { return cOwnedClassesClassCSParserRuleCall_3_0_0; }

		//ownedClasses+=EnumerationCS
		public Assignment getOwnedClassesAssignment_3_1() { return cOwnedClassesAssignment_3_1; }

		//EnumerationCS
		public RuleCall getOwnedClassesEnumerationCSParserRuleCall_3_1_0() { return cOwnedClassesEnumerationCSParserRuleCall_3_1_0; }

		//ownedAnnotations+=TagCS
		public Assignment getOwnedAnnotationsAssignment_3_2() { return cOwnedAnnotationsAssignment_3_2; }

		//TagCS
		public RuleCall getOwnedAnnotationsTagCSParserRuleCall_3_2_0() { return cOwnedAnnotationsTagCSParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ModelTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModeltypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cComplianceKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComplianceKindStringLiteralParserRuleCall_2_0 = (RuleCall)cComplianceKindAssignment_2.eContents().get(0);
		private final Keyword cUsesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedPackageRefsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedPackageRefsPackageRefCSParserRuleCall_4_0 = (RuleCall)cOwnedPackageRefsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedPackageRefsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedPackageRefsPackageRefCSParserRuleCall_5_1_0 = (RuleCall)cOwnedPackageRefsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Assignment cOwnedConditionsAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final RuleCall cOwnedConditionsExpCSParserRuleCall_6_2_0_0 = (RuleCall)cOwnedConditionsAssignment_6_2_0.eContents().get(0);
		private final Group cGroup_6_2_1 = (Group)cGroup_6_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_2_1_0 = (Keyword)cGroup_6_2_1.eContents().get(0);
		private final Assignment cOwnedConditionsAssignment_6_2_1_1 = (Assignment)cGroup_6_2_1.eContents().get(1);
		private final RuleCall cOwnedConditionsExpCSParserRuleCall_6_2_1_1_0 = (RuleCall)cOwnedConditionsAssignment_6_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ModelTypeCS:
		//	"modeltype" name=UnrestrictedName complianceKind=StringLiteral? "uses" ownedPackageRefs+=PackageRefCS (","
		//	ownedPackageRefs+=PackageRefCS)* ("where" "{" (ownedConditions+=ExpCS (";" ownedConditions+=ExpCS)* ";"?)? "}")? ";";
		@Override public ParserRule getRule() { return rule; }

		//"modeltype" name=UnrestrictedName complianceKind=StringLiteral? "uses" ownedPackageRefs+=PackageRefCS (","
		//ownedPackageRefs+=PackageRefCS)* ("where" "{" (ownedConditions+=ExpCS (";" ownedConditions+=ExpCS)* ";"?)? "}")? ";"
		public Group getGroup() { return cGroup; }

		//"modeltype"
		public Keyword getModeltypeKeyword_0() { return cModeltypeKeyword_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//complianceKind=StringLiteral?
		public Assignment getComplianceKindAssignment_2() { return cComplianceKindAssignment_2; }

		//StringLiteral
		public RuleCall getComplianceKindStringLiteralParserRuleCall_2_0() { return cComplianceKindStringLiteralParserRuleCall_2_0; }

		//"uses"
		public Keyword getUsesKeyword_3() { return cUsesKeyword_3; }

		//ownedPackageRefs+=PackageRefCS
		public Assignment getOwnedPackageRefsAssignment_4() { return cOwnedPackageRefsAssignment_4; }

		//PackageRefCS
		public RuleCall getOwnedPackageRefsPackageRefCSParserRuleCall_4_0() { return cOwnedPackageRefsPackageRefCSParserRuleCall_4_0; }

		//("," ownedPackageRefs+=PackageRefCS)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ownedPackageRefs+=PackageRefCS
		public Assignment getOwnedPackageRefsAssignment_5_1() { return cOwnedPackageRefsAssignment_5_1; }

		//PackageRefCS
		public RuleCall getOwnedPackageRefsPackageRefCSParserRuleCall_5_1_0() { return cOwnedPackageRefsPackageRefCSParserRuleCall_5_1_0; }

		//("where" "{" (ownedConditions+=ExpCS (";" ownedConditions+=ExpCS)* ";"?)? "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"where"
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//(ownedConditions+=ExpCS (";" ownedConditions+=ExpCS)* ";"?)?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//ownedConditions+=ExpCS
		public Assignment getOwnedConditionsAssignment_6_2_0() { return cOwnedConditionsAssignment_6_2_0; }

		//ExpCS
		public RuleCall getOwnedConditionsExpCSParserRuleCall_6_2_0_0() { return cOwnedConditionsExpCSParserRuleCall_6_2_0_0; }

		//(";" ownedConditions+=ExpCS)*
		public Group getGroup_6_2_1() { return cGroup_6_2_1; }

		//";"
		public Keyword getSemicolonKeyword_6_2_1_0() { return cSemicolonKeyword_6_2_1_0; }

		//ownedConditions+=ExpCS
		public Assignment getOwnedConditionsAssignment_6_2_1_1() { return cOwnedConditionsAssignment_6_2_1_1; }

		//ExpCS
		public RuleCall getOwnedConditionsExpCSParserRuleCall_6_2_1_1_0() { return cOwnedConditionsExpCSParserRuleCall_6_2_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_6_2_2() { return cSemicolonKeyword_6_2_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ModelTypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelTypeRefCS");
		private final Assignment cOwnedTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedTypeTypedTypeRef2CSParserRuleCall_0 = (RuleCall)cOwnedTypeAssignment.eContents().get(0);
		
		//ModelTypeRefCS:
		//	ownedType=TypedTypeRef2CS;
		@Override public ParserRule getRule() { return rule; }

		//ownedType=TypedTypeRef2CS
		public Assignment getOwnedTypeAssignment() { return cOwnedTypeAssignment; }

		//TypedTypeRef2CS
		public RuleCall getOwnedTypeTypedTypeRef2CSParserRuleCall_0() { return cOwnedTypeTypedTypeRef2CSParserRuleCall_0; }
	}

	public class ModuleOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleOperationCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryOperationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingOperationCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHelperCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstructorCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ModuleOperationCS returns ImperativeOperationCS:
		//	EntryOperationCS | MappingOperationCS | HelperCS | ConstructorCS;
		@Override public ParserRule getRule() { return rule; }

		//EntryOperationCS | MappingOperationCS | HelperCS | ConstructorCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryOperationCS
		public RuleCall getEntryOperationCSParserRuleCall_0() { return cEntryOperationCSParserRuleCall_0; }

		//MappingOperationCS
		public RuleCall getMappingOperationCSParserRuleCall_1() { return cMappingOperationCSParserRuleCall_1; }

		//HelperCS
		public RuleCall getHelperCSParserRuleCall_2() { return cHelperCSParserRuleCall_2; }

		//ConstructorCS
		public RuleCall getConstructorCSParserRuleCall_3() { return cConstructorCSParserRuleCall_3; }
	}

	public class ModulePropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModulePropertyCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConfigurationPropertyCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContextualPropertyCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModulePropertyCS:
		//	ConfigurationPropertyCS | ContextualPropertyCS;
		@Override public ParserRule getRule() { return rule; }

		//ConfigurationPropertyCS | ContextualPropertyCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConfigurationPropertyCS
		public RuleCall getConfigurationPropertyCSParserRuleCall_0() { return cConfigurationPropertyCSParserRuleCall_0; }

		//ContextualPropertyCS
		public RuleCall getContextualPropertyCSParserRuleCall_1() { return cContextualPropertyCSParserRuleCall_1; }
	}

	public class ModuleRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedScopedNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedScopedNamePathName2CSParserRuleCall_0_0 = (RuleCall)cOwnedScopedNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_1_1_0 = (RuleCall)cOwnedParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_1_2_1_0 = (RuleCall)cOwnedParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ModuleRefCS:
		//	ownedScopedName=PathName2CS ("(" ownedParameters+=ParameterDeclarationCS (","
		//	ownedParameters+=ParameterDeclarationCS)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//ownedScopedName=PathName2CS ("(" ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*
		//")")?
		public Group getGroup() { return cGroup; }

		//ownedScopedName=PathName2CS
		public Assignment getOwnedScopedNameAssignment_0() { return cOwnedScopedNameAssignment_0; }

		//PathName2CS
		public RuleCall getOwnedScopedNamePathName2CSParserRuleCall_0_0() { return cOwnedScopedNamePathName2CSParserRuleCall_0_0; }

		//("(" ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_1_1() { return cOwnedParametersAssignment_1_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_1_1_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_1_1_0; }

		//("," ownedParameters+=ParameterDeclarationCS)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_1_2_1() { return cOwnedParametersAssignment_1_2_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_1_2_1_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ModuleUsageCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleUsageCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportKindImportKindCSEnumRuleCall_0_0 = (RuleCall)cImportKindAssignment_0.eContents().get(0);
		private final Assignment cModuleKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleKindModuleKindCSEnumRuleCall_1_0 = (RuleCall)cModuleKindAssignment_1.eContents().get(0);
		private final Assignment cOwnedModuleRefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedModuleRefsModuleRefCSParserRuleCall_2_0 = (RuleCall)cOwnedModuleRefsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedModuleRefsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedModuleRefsModuleRefCSParserRuleCall_3_1_0 = (RuleCall)cOwnedModuleRefsAssignment_3_1.eContents().get(0);
		
		//ModuleUsageCS:
		//	importKind=ImportKindCS moduleKind=ModuleKindCS? ownedModuleRefs+=ModuleRefCS ("," ownedModuleRefs+=ModuleRefCS)*;
		@Override public ParserRule getRule() { return rule; }

		//importKind=ImportKindCS moduleKind=ModuleKindCS? ownedModuleRefs+=ModuleRefCS ("," ownedModuleRefs+=ModuleRefCS)*
		public Group getGroup() { return cGroup; }

		//importKind=ImportKindCS
		public Assignment getImportKindAssignment_0() { return cImportKindAssignment_0; }

		//ImportKindCS
		public RuleCall getImportKindImportKindCSEnumRuleCall_0_0() { return cImportKindImportKindCSEnumRuleCall_0_0; }

		//moduleKind=ModuleKindCS?
		public Assignment getModuleKindAssignment_1() { return cModuleKindAssignment_1; }

		//ModuleKindCS
		public RuleCall getModuleKindModuleKindCSEnumRuleCall_1_0() { return cModuleKindModuleKindCSEnumRuleCall_1_0; }

		//ownedModuleRefs+=ModuleRefCS
		public Assignment getOwnedModuleRefsAssignment_2() { return cOwnedModuleRefsAssignment_2; }

		//ModuleRefCS
		public RuleCall getOwnedModuleRefsModuleRefCSParserRuleCall_2_0() { return cOwnedModuleRefsModuleRefCSParserRuleCall_2_0; }

		//("," ownedModuleRefs+=ModuleRefCS)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ownedModuleRefs+=ModuleRefCS
		public Assignment getOwnedModuleRefsAssignment_3_1() { return cOwnedModuleRefsAssignment_3_1; }

		//ModuleRefCS
		public RuleCall getOwnedModuleRefsModuleRefCSParserRuleCall_3_1_0() { return cOwnedModuleRefsModuleRefCSParserRuleCall_3_1_0; }
	}

	public class ObjectExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedIteratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedIteratorVarDeclarationNoInitCSParserRuleCall_1_1_0 = (RuleCall)cOwnedIteratorAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOwnedVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedVariableObjectVariableCSParserRuleCall_2_0 = (RuleCall)cOwnedVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommercialAtKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedExtentRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedExtentRefExtentRefCSParserRuleCall_3_1_0 = (RuleCall)cOwnedExtentRefAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOwnedExpsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedExpsExpCSParserRuleCall_5_0 = (RuleCall)cOwnedExpsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ObjectExpCS:
		//	"object" ("(" ownedIterator=VarDeclarationNoInitCS ")")? ownedVariable=ObjectVariableCS ("@"
		//	ownedExtentRef=ExtentRefCS)? "{" ownedExps+=ExpCS* "}";
		@Override public ParserRule getRule() { return rule; }

		//"object" ("(" ownedIterator=VarDeclarationNoInitCS ")")? ownedVariable=ObjectVariableCS ("@"
		//ownedExtentRef=ExtentRefCS)? "{" ownedExps+=ExpCS* "}"
		public Group getGroup() { return cGroup; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//("(" ownedIterator=VarDeclarationNoInitCS ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ownedIterator=VarDeclarationNoInitCS
		public Assignment getOwnedIteratorAssignment_1_1() { return cOwnedIteratorAssignment_1_1; }

		//VarDeclarationNoInitCS
		public RuleCall getOwnedIteratorVarDeclarationNoInitCSParserRuleCall_1_1_0() { return cOwnedIteratorVarDeclarationNoInitCSParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//ownedVariable=ObjectVariableCS
		public Assignment getOwnedVariableAssignment_2() { return cOwnedVariableAssignment_2; }

		//ObjectVariableCS
		public RuleCall getOwnedVariableObjectVariableCSParserRuleCall_2_0() { return cOwnedVariableObjectVariableCSParserRuleCall_2_0; }

		//("@" ownedExtentRef=ExtentRefCS)?
		public Group getGroup_3() { return cGroup_3; }

		//"@"
		public Keyword getCommercialAtKeyword_3_0() { return cCommercialAtKeyword_3_0; }

		//ownedExtentRef=ExtentRefCS
		public Assignment getOwnedExtentRefAssignment_3_1() { return cOwnedExtentRefAssignment_3_1; }

		//ExtentRefCS
		public RuleCall getOwnedExtentRefExtentRefCSParserRuleCall_3_1_0() { return cOwnedExtentRefExtentRefCSParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//ownedExps+=ExpCS*
		public Assignment getOwnedExpsAssignment_5() { return cOwnedExpsAssignment_5; }

		//ExpCS
		public RuleCall getOwnedExpsExpCSParserRuleCall_5_0() { return cOwnedExpsExpCSParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ObjectVariableCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectVariableCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOwnedTypeTypedTypeRef2CSParserRuleCall_0_2_0 = (RuleCall)cOwnedTypeAssignment_0_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedTypeTypedTypeRef2CSParserRuleCall_1_0 = (RuleCall)cOwnedTypeAssignment_1.eContents().get(0);
		
		//ObjectVariableCS returns essentialocl::VariableCS:
		//	name=UnrestrictedName ":" ownedType=TypedTypeRef2CS? | ownedType=TypedTypeRef2CS;
		@Override public ParserRule getRule() { return rule; }

		//name=UnrestrictedName ":" ownedType=TypedTypeRef2CS? | ownedType=TypedTypeRef2CS
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=UnrestrictedName ":" ownedType=TypedTypeRef2CS?
		public Group getGroup_0() { return cGroup_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//ownedType=TypedTypeRef2CS?
		public Assignment getOwnedTypeAssignment_0_2() { return cOwnedTypeAssignment_0_2; }

		//TypedTypeRef2CS
		public RuleCall getOwnedTypeTypedTypeRef2CSParserRuleCall_0_2_0() { return cOwnedTypeTypedTypeRef2CSParserRuleCall_0_2_0; }

		//ownedType=TypedTypeRef2CS
		public Assignment getOwnedTypeAssignment_1() { return cOwnedTypeAssignment_1; }

		//TypedTypeRef2CS
		public RuleCall getOwnedTypeTypedTypeRef2CSParserRuleCall_1_0() { return cOwnedTypeTypedTypeRef2CSParserRuleCall_1_0; }
	}

	public class OperationRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationRefCS");
		private final Assignment cOwnedPathNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedPathNamePathName2CSParserRuleCall_0 = (RuleCall)cOwnedPathNameAssignment.eContents().get(0);
		
		//OperationRefCS:
		//	ownedPathName=PathName2CS;
		@Override public ParserRule getRule() { return rule; }

		//ownedPathName=PathName2CS
		public Assignment getOwnedPathNameAssignment() { return cOwnedPathNameAssignment; }

		//PathName2CS
		public RuleCall getOwnedPathNamePathName2CSParserRuleCall_0() { return cOwnedPathNamePathName2CSParserRuleCall_0; }
	}

	public class PackageRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUriAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUriStringLiteralParserRuleCall_0_0 = (RuleCall)cUriAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOwnedScopedNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedScopedNamePathName2CSParserRuleCall_1_0_0 = (RuleCall)cOwnedScopedNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cUriAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cUriStringLiteralParserRuleCall_1_2_0 = (RuleCall)cUriAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PackageRefCS:
		//	uri=StringLiteral | ownedScopedName=PathName2CS "(" uri=StringLiteral ")";
		@Override public ParserRule getRule() { return rule; }

		//uri=StringLiteral | ownedScopedName=PathName2CS "(" uri=StringLiteral ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//uri=StringLiteral
		public Assignment getUriAssignment_0() { return cUriAssignment_0; }

		//StringLiteral
		public RuleCall getUriStringLiteralParserRuleCall_0_0() { return cUriStringLiteralParserRuleCall_0_0; }

		//ownedScopedName=PathName2CS "(" uri=StringLiteral ")"
		public Group getGroup_1() { return cGroup_1; }

		//ownedScopedName=PathName2CS
		public Assignment getOwnedScopedNameAssignment_1_0() { return cOwnedScopedNameAssignment_1_0; }

		//PathName2CS
		public RuleCall getOwnedScopedNamePathName2CSParserRuleCall_1_0_0() { return cOwnedScopedNamePathName2CSParserRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//uri=StringLiteral
		public Assignment getUriAssignment_1_2() { return cUriAssignment_1_2; }

		//StringLiteral
		public RuleCall getUriStringLiteralParserRuleCall_1_2_0() { return cUriStringLiteralParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1.eContents().get(0);
		
		//ParameterCS returns base::ParameterCS:
		//	name=UnrestrictedName (":" ownedType=TypedMultiplicityRef2CS)?;
		@Override public ParserRule getRule() { return rule; }

		//name=UnrestrictedName (":" ownedType=TypedMultiplicityRef2CS)?
		public Group getGroup() { return cGroup; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }

		//(":" ownedType=TypedMultiplicityRef2CS)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//ownedType=TypedMultiplicityRef2CS
		public Assignment getOwnedTypeAssignment_1_1() { return cOwnedTypeAssignment_1_1; }

		//TypedMultiplicityRef2CS
		public RuleCall getOwnedTypeTypedMultiplicityRef2CSParserRuleCall_1_1_0() { return cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_1_1_0; }
	}

	public class ParameterDeclarationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclarationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionDirectionKindCSEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_2_1_0 = (RuleCall)cOwnedTypeAssignment_2_1.eContents().get(0);
		private final Assignment cOwnedInitPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedInitPartInitPartCSParserRuleCall_3_0 = (RuleCall)cOwnedInitPartAssignment_3.eContents().get(0);
		
		//ParameterDeclarationCS:
		//	direction=DirectionKindCS? name= // FIXME Spec grammar says that you can have just a typeSpec
		// UnrestrictedName (":"
		//	ownedType=TypedMultiplicityRef2CS)? ownedInitPart=InitPartCS?;
		@Override public ParserRule getRule() { return rule; }

		//direction=DirectionKindCS? name= // FIXME Spec grammar says that you can have just a typeSpec
		// UnrestrictedName (":"
		//ownedType=TypedMultiplicityRef2CS)? ownedInitPart=InitPartCS?
		public Group getGroup() { return cGroup; }

		//direction=DirectionKindCS?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }

		//DirectionKindCS
		public RuleCall getDirectionDirectionKindCSEnumRuleCall_0_0() { return cDirectionDirectionKindCSEnumRuleCall_0_0; }

		//name= // FIXME Spec grammar says that you can have just a typeSpec
		// UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//// FIXME Spec grammar says that you can have just a typeSpec
		// UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//(":" ownedType=TypedMultiplicityRef2CS)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//ownedType=TypedMultiplicityRef2CS
		public Assignment getOwnedTypeAssignment_2_1() { return cOwnedTypeAssignment_2_1; }

		//TypedMultiplicityRef2CS
		public RuleCall getOwnedTypeTypedMultiplicityRef2CSParserRuleCall_2_1_0() { return cOwnedTypeTypedMultiplicityRef2CSParserRuleCall_2_1_0; }

		//ownedInitPart=InitPartCS?
		public Assignment getOwnedInitPartAssignment_3() { return cOwnedInitPartAssignment_3; }

		//InitPartCS
		public RuleCall getOwnedInitPartInitPartCSParserRuleCall_3_0() { return cOwnedInitPartInitPartCSParserRuleCall_3_0; }
	}

	public class QVToClassCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QVToClassCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsIntermediateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsIntermediateIntermediateKeyword_0_0 = (Keyword)cIsIntermediateAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cOwnedSuperTypesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cOwnedSuperTypesTypedRefCSParserRuleCall_3_1_0_0 = (RuleCall)cOwnedSuperTypesAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cOwnedSuperTypesAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cOwnedSuperTypesTypedRefCSParserRuleCall_3_1_1_1_0 = (RuleCall)cOwnedSuperTypesAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_1_0 = (Alternatives)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedPropertiesAssignment_4_1_0_0 = (Assignment)cAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cOwnedPropertiesClassifierPropertyCSParserRuleCall_4_1_0_0_0 = (RuleCall)cOwnedPropertiesAssignment_4_1_0_0.eContents().get(0);
		private final Assignment cOwnedOperationsAssignment_4_1_0_1 = (Assignment)cAlternatives_4_1_0.eContents().get(1);
		private final RuleCall cOwnedOperationsClassifierOperationCSParserRuleCall_4_1_0_1_0 = (RuleCall)cOwnedOperationsAssignment_4_1_0_1.eContents().get(0);
		private final Assignment cOwnedAnnotationsAssignment_4_1_0_2 = (Assignment)cAlternatives_4_1_0.eContents().get(2);
		private final RuleCall cOwnedAnnotationsTagCSParserRuleCall_4_1_0_2_0 = (RuleCall)cOwnedAnnotationsAssignment_4_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//QVToClassCS:
		//	isIntermediate?="intermediate"? // FIXME qualifier += Qualifier*
		// "class" name=UnrestrictedName ("extends"
		//	(ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))? ("{" ((ownedProperties+=ClassifierPropertyCS |
		//	ownedOperations+=ClassifierOperationCS | ownedAnnotations+=TagCS) ";")+ "}")?;
		@Override public ParserRule getRule() { return rule; }

		//isIntermediate?="intermediate"? // FIXME qualifier += Qualifier*
		// "class" name=UnrestrictedName ("extends"
		//(ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))? ("{" ((ownedProperties+=ClassifierPropertyCS |
		//ownedOperations+=ClassifierOperationCS | ownedAnnotations+=TagCS) ";")+ "}")?
		public Group getGroup() { return cGroup; }

		//isIntermediate?="intermediate"?
		public Assignment getIsIntermediateAssignment_0() { return cIsIntermediateAssignment_0; }

		//"intermediate"
		public Keyword getIsIntermediateIntermediateKeyword_0_0() { return cIsIntermediateIntermediateKeyword_0_0; }

		//// FIXME qualifier += Qualifier*
		// "class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_2_0() { return cNameUnrestrictedNameParserRuleCall_2_0; }

		//("extends" (ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//ownedSuperTypes+=TypedRefCS
		public Assignment getOwnedSuperTypesAssignment_3_1_0() { return cOwnedSuperTypesAssignment_3_1_0; }

		//TypedRefCS
		public RuleCall getOwnedSuperTypesTypedRefCSParserRuleCall_3_1_0_0() { return cOwnedSuperTypesTypedRefCSParserRuleCall_3_1_0_0; }

		//("," ownedSuperTypes+=TypedRefCS)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//ownedSuperTypes+=TypedRefCS
		public Assignment getOwnedSuperTypesAssignment_3_1_1_1() { return cOwnedSuperTypesAssignment_3_1_1_1; }

		//TypedRefCS
		public RuleCall getOwnedSuperTypesTypedRefCSParserRuleCall_3_1_1_1_0() { return cOwnedSuperTypesTypedRefCSParserRuleCall_3_1_1_1_0; }

		//("{" ((ownedProperties+=ClassifierPropertyCS | ownedOperations+=ClassifierOperationCS | ownedAnnotations+=TagCS) ";")+
		//"}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//((ownedProperties+=ClassifierPropertyCS | ownedOperations+=ClassifierOperationCS | ownedAnnotations+=TagCS) ";")+
		public Group getGroup_4_1() { return cGroup_4_1; }

		//ownedProperties+=ClassifierPropertyCS | ownedOperations+=ClassifierOperationCS | ownedAnnotations+=TagCS
		public Alternatives getAlternatives_4_1_0() { return cAlternatives_4_1_0; }

		//ownedProperties+=ClassifierPropertyCS
		public Assignment getOwnedPropertiesAssignment_4_1_0_0() { return cOwnedPropertiesAssignment_4_1_0_0; }

		//ClassifierPropertyCS
		public RuleCall getOwnedPropertiesClassifierPropertyCSParserRuleCall_4_1_0_0_0() { return cOwnedPropertiesClassifierPropertyCSParserRuleCall_4_1_0_0_0; }

		//ownedOperations+=ClassifierOperationCS
		public Assignment getOwnedOperationsAssignment_4_1_0_1() { return cOwnedOperationsAssignment_4_1_0_1; }

		//ClassifierOperationCS
		public RuleCall getOwnedOperationsClassifierOperationCSParserRuleCall_4_1_0_1_0() { return cOwnedOperationsClassifierOperationCSParserRuleCall_4_1_0_1_0; }

		//ownedAnnotations+=TagCS
		public Assignment getOwnedAnnotationsAssignment_4_1_0_2() { return cOwnedAnnotationsAssignment_4_1_0_2; }

		//TagCS
		public RuleCall getOwnedAnnotationsTagCSParserRuleCall_4_1_0_2_0() { return cOwnedAnnotationsTagCSParserRuleCall_4_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1_1() { return cSemicolonKeyword_4_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class ResolveExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResolveExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResolveByTypeExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cResolveByMappingExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// FIXME NameExpCS ???
		// ResolveExpCS:
		//	ResolveByTypeExpCS | ResolveByMappingExpCS;
		@Override public ParserRule getRule() { return rule; }

		//ResolveByTypeExpCS | ResolveByMappingExpCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ResolveByTypeExpCS
		public RuleCall getResolveByTypeExpCSParserRuleCall_0() { return cResolveByTypeExpCSParserRuleCall_0; }

		//ResolveByMappingExpCS
		public RuleCall getResolveByMappingExpCSParserRuleCall_1() { return cResolveByMappingExpCSParserRuleCall_1; }
	}

	public class ResolveByTypeExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResolveByTypeExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsDeferredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsDeferredLateKeyword_0_0 = (Keyword)cIsDeferredAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameResolveKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameResolveoneKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameResolveinvKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameResolveinvoneKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedTargetTypeSelectorCSParserRuleCall_3_0 = (RuleCall)cOwnedTargetAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOwnedConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedConditionExpCSParserRuleCall_4_1_0 = (RuleCall)cOwnedConditionAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ResolveByTypeExpCS:
		//	isDeferred?="late"? name=("resolve" | "resolveone" | "resolveinv" | "resolveinvone") "(" ownedTarget=TypeSelectorCS
		//	("|" ownedCondition=ExpCS)? ")";
		@Override public ParserRule getRule() { return rule; }

		//isDeferred?="late"? name=("resolve" | "resolveone" | "resolveinv" | "resolveinvone") "(" ownedTarget=TypeSelectorCS ("|"
		//ownedCondition=ExpCS)? ")"
		public Group getGroup() { return cGroup; }

		//isDeferred?="late"?
		public Assignment getIsDeferredAssignment_0() { return cIsDeferredAssignment_0; }

		//"late"
		public Keyword getIsDeferredLateKeyword_0_0() { return cIsDeferredLateKeyword_0_0; }

		//name=("resolve" | "resolveone" | "resolveinv" | "resolveinvone")
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"resolve" | "resolveone" | "resolveinv" | "resolveinvone"
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//"resolve"
		public Keyword getNameResolveKeyword_1_0_0() { return cNameResolveKeyword_1_0_0; }

		//"resolveone"
		public Keyword getNameResolveoneKeyword_1_0_1() { return cNameResolveoneKeyword_1_0_1; }

		//"resolveinv"
		public Keyword getNameResolveinvKeyword_1_0_2() { return cNameResolveinvKeyword_1_0_2; }

		//"resolveinvone"
		public Keyword getNameResolveinvoneKeyword_1_0_3() { return cNameResolveinvoneKeyword_1_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//ownedTarget=TypeSelectorCS
		public Assignment getOwnedTargetAssignment_3() { return cOwnedTargetAssignment_3; }

		//TypeSelectorCS
		public RuleCall getOwnedTargetTypeSelectorCSParserRuleCall_3_0() { return cOwnedTargetTypeSelectorCSParserRuleCall_3_0; }

		//("|" ownedCondition=ExpCS)?
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//ownedCondition=ExpCS
		public Assignment getOwnedConditionAssignment_4_1() { return cOwnedConditionAssignment_4_1; }

		//ExpCS
		public RuleCall getOwnedConditionExpCSParserRuleCall_4_1_0() { return cOwnedConditionExpCSParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ResolveByMappingExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResolveByMappingExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsDeferredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsDeferredLateKeyword_0_0 = (Keyword)cIsDeferredAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameResolveInKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameResolveoneInKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameResolveinvInKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameResolveinvoneInKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedMappingRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedMappingRefOperationRefCSParserRuleCall_3_0 = (RuleCall)cOwnedMappingRefAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOwnedTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedTargetVarDeclarationNoInitCSParserRuleCall_4_1_0 = (RuleCall)cOwnedTargetAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cOwnedConditionAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cOwnedConditionExpCSParserRuleCall_4_3_0 = (RuleCall)cOwnedConditionAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ResolveByMappingExpCS:
		//	isDeferred?="late"? name=("resolveIn" | "resolveoneIn" | "resolveinvIn" | "resolveinvoneIn") "("
		//	ownedMappingRef=OperationRefCS ("," ownedTarget=VarDeclarationNoInitCS "|" ownedCondition=ExpCS)? ")";
		@Override public ParserRule getRule() { return rule; }

		//isDeferred?="late"? name=("resolveIn" | "resolveoneIn" | "resolveinvIn" | "resolveinvoneIn") "("
		//ownedMappingRef=OperationRefCS ("," ownedTarget=VarDeclarationNoInitCS "|" ownedCondition=ExpCS)? ")"
		public Group getGroup() { return cGroup; }

		//isDeferred?="late"?
		public Assignment getIsDeferredAssignment_0() { return cIsDeferredAssignment_0; }

		//"late"
		public Keyword getIsDeferredLateKeyword_0_0() { return cIsDeferredLateKeyword_0_0; }

		//name=("resolveIn" | "resolveoneIn" | "resolveinvIn" | "resolveinvoneIn")
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"resolveIn" | "resolveoneIn" | "resolveinvIn" | "resolveinvoneIn"
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//"resolveIn"
		public Keyword getNameResolveInKeyword_1_0_0() { return cNameResolveInKeyword_1_0_0; }

		//"resolveoneIn"
		public Keyword getNameResolveoneInKeyword_1_0_1() { return cNameResolveoneInKeyword_1_0_1; }

		//"resolveinvIn"
		public Keyword getNameResolveinvInKeyword_1_0_2() { return cNameResolveinvInKeyword_1_0_2; }

		//"resolveinvoneIn"
		public Keyword getNameResolveinvoneInKeyword_1_0_3() { return cNameResolveinvoneInKeyword_1_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//ownedMappingRef=OperationRefCS
		public Assignment getOwnedMappingRefAssignment_3() { return cOwnedMappingRefAssignment_3; }

		//OperationRefCS
		public RuleCall getOwnedMappingRefOperationRefCSParserRuleCall_3_0() { return cOwnedMappingRefOperationRefCSParserRuleCall_3_0; }

		//("," ownedTarget=VarDeclarationNoInitCS "|" ownedCondition=ExpCS)?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//ownedTarget=VarDeclarationNoInitCS
		public Assignment getOwnedTargetAssignment_4_1() { return cOwnedTargetAssignment_4_1; }

		//VarDeclarationNoInitCS
		public RuleCall getOwnedTargetVarDeclarationNoInitCSParserRuleCall_4_1_0() { return cOwnedTargetVarDeclarationNoInitCSParserRuleCall_4_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4_2() { return cVerticalLineKeyword_4_2; }

		//ownedCondition=ExpCS
		public Assignment getOwnedConditionAssignment_4_3() { return cOwnedConditionAssignment_4_3; }

		//ExpCS
		public RuleCall getOwnedConditionExpCSParserRuleCall_4_3_0() { return cOwnedConditionExpCSParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class SimpleOperationBodyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleOperationBodyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedContentExpsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedContentExpsExpCSParserRuleCall_1_0 = (RuleCall)cOwnedContentExpsAssignment_1.eContents().get(0);
		
		//SimpleOperationBodyCS returns OperationBodyCS:
		//	"=" ownedContentExps+=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//"=" ownedContentExps+=ExpCS
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//ownedContentExps+=ExpCS
		public Assignment getOwnedContentExpsAssignment_1() { return cOwnedContentExpsAssignment_1; }

		//ExpCS
		public RuleCall getOwnedContentExpsExpCSParserRuleCall_1_0() { return cOwnedContentExpsExpCSParserRuleCall_1_0; }
	}

	public class StereotypeQualifierCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StereotypeQualifierCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStereotypesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStereotypesIdentifierParserRuleCall_1_0_0 = (RuleCall)cStereotypesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStereotypesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStereotypesIdentifierParserRuleCall_1_1_1_0 = (RuleCall)cStereotypesAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StereotypeQualifierCS:
		//	"<<" (stereotypes+=Identifier ("," stereotypes+=Identifier)*) ">>";
		@Override public ParserRule getRule() { return rule; }

		//"<<" (stereotypes+=Identifier ("," stereotypes+=Identifier)*) ">>"
		public Group getGroup() { return cGroup; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//stereotypes+=Identifier ("," stereotypes+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//stereotypes+=Identifier
		public Assignment getStereotypesAssignment_1_0() { return cStereotypesAssignment_1_0; }

		//Identifier
		public RuleCall getStereotypesIdentifierParserRuleCall_1_0_0() { return cStereotypesIdentifierParserRuleCall_1_0_0; }

		//("," stereotypes+=Identifier)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//stereotypes+=Identifier
		public Assignment getStereotypesAssignment_1_1_1() { return cStereotypesAssignment_1_1_1; }

		//Identifier
		public RuleCall getStereotypesIdentifierParserRuleCall_1_1_1_0() { return cStereotypesIdentifierParserRuleCall_1_1_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
	}

	public class TagCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TagCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cOwnedElementPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedElementPathPathName2CSParserRuleCall_2_0 = (RuleCall)cOwnedElementPathAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedExpressionExpCSParserRuleCall_3_1_0 = (RuleCall)cOwnedExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TagCS:
		//	"tag" name=(UnrestrictedName | SINGLE_QUOTED_STRING)? ownedElementPath=PathName2CS ("=" ownedExpression=ExpCS)? ";";
		@Override public ParserRule getRule() { return rule; }

		//"tag" name=(UnrestrictedName | SINGLE_QUOTED_STRING)? ownedElementPath=PathName2CS ("=" ownedExpression=ExpCS)? ";"
		public Group getGroup() { return cGroup; }

		//"tag"
		public Keyword getTagKeyword_0() { return cTagKeyword_0; }

		//name=(UnrestrictedName | SINGLE_QUOTED_STRING)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName | SINGLE_QUOTED_STRING
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0_0() { return cNameUnrestrictedNameParserRuleCall_1_0_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getNameSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1() { return cNameSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1; }

		//ownedElementPath=PathName2CS
		public Assignment getOwnedElementPathAssignment_2() { return cOwnedElementPathAssignment_2; }

		//PathName2CS
		public RuleCall getOwnedElementPathPathName2CSParserRuleCall_2_0() { return cOwnedElementPathPathName2CSParserRuleCall_2_0; }

		//("=" ownedExpression=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//ownedExpression=ExpCS
		public Assignment getOwnedExpressionAssignment_3_1() { return cOwnedExpressionAssignment_3_1; }

		//ExpCS
		public RuleCall getOwnedExpressionExpCSParserRuleCall_3_1_0() { return cOwnedExpressionExpCSParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TransformationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransformationDeclCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransformationDefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TransformationCS:
		//	TransformationDeclCS | TransformationDefCS;
		@Override public ParserRule getRule() { return rule; }

		//TransformationDeclCS | TransformationDefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//TransformationDeclCS
		public RuleCall getTransformationDeclCSParserRuleCall_0() { return cTransformationDeclCSParserRuleCall_0; }

		//TransformationDefCS
		public RuleCall getTransformationDefCSParserRuleCall_1() { return cTransformationDefCSParserRuleCall_1; }
	}

	public class TransformationDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTransformationHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TransformationDeclCS returns TransformationCS:
		//	TransformationHeaderCS ";";
		@Override public ParserRule getRule() { return rule; }

		//TransformationHeaderCS ";"
		public Group getGroup() { return cGroup; }

		//TransformationHeaderCS
		public RuleCall getTransformationHeaderCSParserRuleCall_0() { return cTransformationHeaderCSParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class TransformationDefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTransformationHeaderCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOwnedPropertiesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOwnedPropertiesModulePropertyCSParserRuleCall_2_0_0 = (RuleCall)cOwnedPropertiesAssignment_2_0.eContents().get(0);
		private final Assignment cOwnedOperationsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedOperationsModuleOperationCSParserRuleCall_2_1_0 = (RuleCall)cOwnedOperationsAssignment_2_1.eContents().get(0);
		private final Assignment cOwnedAnnotationsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cOwnedAnnotationsTagCSParserRuleCall_2_2_0 = (RuleCall)cOwnedAnnotationsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TransformationDefCS returns TransformationCS:
		//	TransformationHeaderCS "{" (ownedProperties+=ModulePropertyCS
		//	// (ownedClasses+= ModuleTypeCS)* FIXME Transformation is not a package anymore. Not allowed
		// |
		//	ownedOperations+=ModuleOperationCS | ownedAnnotations+=TagCS)* "}" ";"?;
		@Override public ParserRule getRule() { return rule; }

		//TransformationHeaderCS "{" (ownedProperties+=ModulePropertyCS
		//// (ownedClasses+= ModuleTypeCS)* FIXME Transformation is not a package anymore. Not allowed
		// |
		//ownedOperations+=ModuleOperationCS | ownedAnnotations+=TagCS)* "}" ";"?
		public Group getGroup() { return cGroup; }

		//TransformationHeaderCS
		public RuleCall getTransformationHeaderCSParserRuleCall_0() { return cTransformationHeaderCSParserRuleCall_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(ownedProperties+=ModulePropertyCS
		//// (ownedClasses+= ModuleTypeCS)* FIXME Transformation is not a package anymore. Not allowed
		// |
		//ownedOperations+=ModuleOperationCS | ownedAnnotations+=TagCS)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ownedProperties+=ModulePropertyCS
		public Assignment getOwnedPropertiesAssignment_2_0() { return cOwnedPropertiesAssignment_2_0; }

		//ModulePropertyCS
		public RuleCall getOwnedPropertiesModulePropertyCSParserRuleCall_2_0_0() { return cOwnedPropertiesModulePropertyCSParserRuleCall_2_0_0; }

		//ownedOperations+=ModuleOperationCS
		public Assignment getOwnedOperationsAssignment_2_1() { return cOwnedOperationsAssignment_2_1; }

		//ModuleOperationCS
		public RuleCall getOwnedOperationsModuleOperationCSParserRuleCall_2_1_0() { return cOwnedOperationsModuleOperationCSParserRuleCall_2_1_0; }

		//ownedAnnotations+=TagCS
		public Assignment getOwnedAnnotationsAssignment_2_2() { return cOwnedAnnotationsAssignment_2_2; }

		//TagCS
		public RuleCall getOwnedAnnotationsTagCSParserRuleCall_2_2_0() { return cOwnedAnnotationsTagCSParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TransformationHeaderCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationHeaderCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedQualifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedQualifiersTransformationQualifierParserRuleCall_0_0 = (RuleCall)cOwnedQualifiersAssignment_0.eContents().get(0);
		private final Keyword cTransformationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_4_0 = (RuleCall)cOwnedParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedParametersParameterDeclarationCSParserRuleCall_5_1_0 = (RuleCall)cOwnedParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOwnedModuleUsagesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOwnedModuleUsagesModuleUsageCSParserRuleCall_7_0 = (RuleCall)cOwnedModuleUsagesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cRefinesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOwnedRefinedModuleAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOwnedRefinedModuleModuleRefCSParserRuleCall_8_1_0 = (RuleCall)cOwnedRefinedModuleAssignment_8_1.eContents().get(0);
		
		//TransformationHeaderCS returns TransformationCS:
		//	ownedQualifiers+=TransformationQualifier* "transformation" name=UnrestrictedName "("
		//	ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)* ")"
		//	ownedModuleUsages+=ModuleUsageCS* ("refines" ownedRefinedModule=ModuleRefCS)?;
		@Override public ParserRule getRule() { return rule; }

		//ownedQualifiers+=TransformationQualifier* "transformation" name=UnrestrictedName "("
		//ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)* ")"
		//ownedModuleUsages+=ModuleUsageCS* ("refines" ownedRefinedModule=ModuleRefCS)?
		public Group getGroup() { return cGroup; }

		//ownedQualifiers+=TransformationQualifier*
		public Assignment getOwnedQualifiersAssignment_0() { return cOwnedQualifiersAssignment_0; }

		//TransformationQualifier
		public RuleCall getOwnedQualifiersTransformationQualifierParserRuleCall_0_0() { return cOwnedQualifiersTransformationQualifierParserRuleCall_0_0; }

		//"transformation"
		public Keyword getTransformationKeyword_1() { return cTransformationKeyword_1; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_2_0() { return cNameUnrestrictedNameParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_4() { return cOwnedParametersAssignment_4; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_4_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_4_0; }

		//("," ownedParameters+=ParameterDeclarationCS)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ownedParameters+=ParameterDeclarationCS
		public Assignment getOwnedParametersAssignment_5_1() { return cOwnedParametersAssignment_5_1; }

		//ParameterDeclarationCS
		public RuleCall getOwnedParametersParameterDeclarationCSParserRuleCall_5_1_0() { return cOwnedParametersParameterDeclarationCSParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//ownedModuleUsages+=ModuleUsageCS*
		public Assignment getOwnedModuleUsagesAssignment_7() { return cOwnedModuleUsagesAssignment_7; }

		//ModuleUsageCS
		public RuleCall getOwnedModuleUsagesModuleUsageCSParserRuleCall_7_0() { return cOwnedModuleUsagesModuleUsageCSParserRuleCall_7_0; }

		//("refines" ownedRefinedModule=ModuleRefCS)?
		public Group getGroup_8() { return cGroup_8; }

		//"refines"
		public Keyword getRefinesKeyword_8_0() { return cRefinesKeyword_8_0; }

		//ownedRefinedModule=ModuleRefCS
		public Assignment getOwnedRefinedModuleAssignment_8_1() { return cOwnedRefinedModuleAssignment_8_1; }

		//ModuleRefCS
		public RuleCall getOwnedRefinedModuleModuleRefCSParserRuleCall_8_1_0() { return cOwnedRefinedModuleModuleRefCSParserRuleCall_8_1_0; }
	}

	public class TypeSelectorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSelectorCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedTypeTypedRef2CSParserRuleCall_1_0 = (RuleCall)cOwnedTypeAssignment_1.eContents().get(0);
		
		//// typedefs are deprecated
		//
		//// TypedefCS: 'typedef' name=Identifier '=' typespec=TypeExpCS ('[' condition=ExpCS ']')? ';';
		// TypeSelectorCS returns
		//essentialocl::VariableCS:
		//	(name=UnrestrictedName ":")? ownedType=TypedRef2CS;
		@Override public ParserRule getRule() { return rule; }

		//(name=UnrestrictedName ":")? ownedType=TypedRef2CS
		public Group getGroup() { return cGroup; }

		//(name=UnrestrictedName ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//ownedType=TypedRef2CS
		public Assignment getOwnedTypeAssignment_1() { return cOwnedTypeAssignment_1; }

		//TypedRef2CS
		public RuleCall getOwnedTypeTypedRef2CSParserRuleCall_1_0() { return cOwnedTypeTypedRef2CSParserRuleCall_1_0; }
	}

	public class UnitPackageCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitPackageCS");
		private final RuleCall cMetamodelCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnitPackageCS returns base::PackageCS:
		//	MetamodelCS;
		@Override public ParserRule getRule() { return rule; }

		//MetamodelCS
		public RuleCall getMetamodelCSParserRuleCall() { return cMetamodelCSParserRuleCall; }
	}

	public class UnitRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentIdentifierParserRuleCall_0_0 = (RuleCall)cSegmentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSegmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentIdentifierParserRuleCall_1_1_0 = (RuleCall)cSegmentAssignment_1_1.eContents().get(0);
		
		//// FIXME review these units and specially the metamodel UnitRefCS
		// UnitRefCS:
		//	segment+=Identifier ("." segment+=Identifier)*;
		@Override public ParserRule getRule() { return rule; }

		//segment+=Identifier ("." segment+=Identifier)*
		public Group getGroup() { return cGroup; }

		//segment+=Identifier
		public Assignment getSegmentAssignment_0() { return cSegmentAssignment_0; }

		//Identifier
		public RuleCall getSegmentIdentifierParserRuleCall_0_0() { return cSegmentIdentifierParserRuleCall_0_0; }

		//("." segment+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//segment+=Identifier
		public Assignment getSegmentAssignment_1_1() { return cSegmentAssignment_1_1; }

		//Identifier
		public RuleCall getSegmentIdentifierParserRuleCall_1_1_0() { return cSegmentIdentifierParserRuleCall_1_1_0; }
	}

	public class UnitTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitTypeCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelTypeCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransformationCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLibraryCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UnitTypeCS returns base::TypeCS:
		//	ModelTypeCS | TransformationCS | LibraryCS;
		@Override public ParserRule getRule() { return rule; }

		//ModelTypeCS | TransformationCS | LibraryCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ModelTypeCS
		public RuleCall getModelTypeCSParserRuleCall_0() { return cModelTypeCSParserRuleCall_0; }

		//TransformationCS
		public RuleCall getTransformationCSParserRuleCall_1() { return cTransformationCSParserRuleCall_1; }

		//LibraryCS
		public RuleCall getLibraryCSParserRuleCall_2() { return cLibraryCSParserRuleCall_2; }
	}
	
	
	public class MetamodelKindCSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelKindCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMetamodelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMetamodelMetamodelKeyword_0_0 = (Keyword)cMetamodelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPackagePackageKeyword_1_0 = (Keyword)cPackageEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MetamodelKindCS:
		//	metamodel | package;
		public EnumRule getRule() { return rule; }

		//metamodel | package
		public Alternatives getAlternatives() { return cAlternatives; }

		//metamodel
		public EnumLiteralDeclaration getMetamodelEnumLiteralDeclaration_0() { return cMetamodelEnumLiteralDeclaration_0; }

		//"metamodel"
		public Keyword getMetamodelMetamodelKeyword_0_0() { return cMetamodelMetamodelKeyword_0_0; }

		//package
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_1() { return cPackageEnumLiteralDeclaration_1; }

		//"package"
		public Keyword getPackagePackageKeyword_1_0() { return cPackagePackageKeyword_1_0; }
	}

	public class DirectionKindCSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DirectionKindCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DirectionKindCS:
		//	in | out | inout;
		public EnumRule getRule() { return rule; }

		//in | out | inout
		public Alternatives getAlternatives() { return cAlternatives; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }

		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_2() { return cInoutEnumLiteralDeclaration_2; }

		//"inout"
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}

	public class ImportKindCSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ImportKindCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAccessEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAccessAccessKeyword_0_0 = (Keyword)cAccessEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExtensionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExtensionExtendsKeyword_1_0 = (Keyword)cExtensionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ImportKindCS:
		//	access | extension="extends";
		public EnumRule getRule() { return rule; }

		//access | extension="extends"
		public Alternatives getAlternatives() { return cAlternatives; }

		//access
		public EnumLiteralDeclaration getAccessEnumLiteralDeclaration_0() { return cAccessEnumLiteralDeclaration_0; }

		//"access"
		public Keyword getAccessAccessKeyword_0_0() { return cAccessAccessKeyword_0_0; }

		//extension="extends"
		public EnumLiteralDeclaration getExtensionEnumLiteralDeclaration_1() { return cExtensionEnumLiteralDeclaration_1; }

		//"extends"
		public Keyword getExtensionExtendsKeyword_1_0() { return cExtensionExtendsKeyword_1_0; }
	}

	public class ModuleKindCSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleKindCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLibraryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLibraryLibraryKeyword_0_0 = (Keyword)cLibraryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTransformationEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTransformationTransformationKeyword_1_0 = (Keyword)cTransformationEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ModuleKindCS:
		//	library | transformation;
		public EnumRule getRule() { return rule; }

		//library | transformation
		public Alternatives getAlternatives() { return cAlternatives; }

		//library
		public EnumLiteralDeclaration getLibraryEnumLiteralDeclaration_0() { return cLibraryEnumLiteralDeclaration_0; }

		//"library"
		public Keyword getLibraryLibraryKeyword_0_0() { return cLibraryLibraryKeyword_0_0; }

		//transformation
		public EnumLiteralDeclaration getTransformationEnumLiteralDeclaration_1() { return cTransformationEnumLiteralDeclaration_1; }

		//"transformation"
		public Keyword getTransformationTransformationKeyword_1_0() { return cTransformationTransformationKeyword_1_0; }
	}
	
	private final TopLevelCSElements pTopLevelCS;
	private final MetamodelKindCSElements unknownRuleMetamodelKindCS;
	private final DirectionKindCSElements unknownRuleDirectionKindCS;
	private final ImportKindCSElements unknownRuleImportKindCS;
	private final ModuleKindCSElements unknownRuleModuleKindCS;
	private final TransformationQualifierElements pTransformationQualifier;
	private final LibraryQualifierElements pLibraryQualifier;
	private final FeatureQualifierElements pFeatureQualifier;
	private final OperationQualifierElements pOperationQualifier;
	private final MultiplicityCSElements pMultiplicityCS;
	private final PathName2CSElements pPathName2CS;
	private final PathElement2CSElements pPathElement2CS;
	private final TypedMultiplicityRef2CSElements pTypedMultiplicityRef2CS;
	private final TypeRefCSElements pTypeRefCS;
	private final TypedRef2CSElements pTypedRef2CS;
	private final TypedTypeRef2CSElements pTypedTypeRef2CS;
	private final ClassCSElements pClassCS;
	private final ClassifierOperationCSElements pClassifierOperationCS;
	private final ClassifierPropertyCSElements pClassifierPropertyCS;
	private final CompoundOperationBodyCSElements pCompoundOperationBodyCS;
	private final ConfigurationPropertyCSElements pConfigurationPropertyCS;
	private final ContextualPropertyCSElements pContextualPropertyCS;
	private final ConstructorCSElements pConstructorCS;
	private final ConstructorDeclarationCSElements pConstructorDeclarationCS;
	private final ConstructorDefinitionCSElements pConstructorDefinitionCS;
	private final ConstructorHeaderCSElements pConstructorHeaderCS;
	private final DataTypeCSElements pDataTypeCS;
	private final EntryOperationCSElements pEntryOperationCS;
	private final EnumerationCSElements pEnumerationCS;
	private final EnumerationLiteralCSElements pEnumerationLiteralCS;
	private final ExceptionCSElements pExceptionCS;
	private final HelperCSElements pHelperCS;
	private final HelperDeclarationCSElements pHelperDeclarationCS;
	private final HelperHeaderCSElements pHelperHeaderCS;
	private final HelperDefinitionCSElements pHelperDefinitionCS;
	private final HelperSimpleDefinitionCSElements pHelperSimpleDefinitionCS;
	private final HelperCompoundDefinitionCSElements pHelperCompoundDefinitionCS;
	private final ImportCSElements pImportCS;
	private final InitPartCSElements pInitPartCS;
	private final LibraryCSElements pLibraryCS;
	private final LibraryDeclCSElements pLibraryDeclCS;
	private final LibraryDefCSElements pLibraryDefCS;
	private final LibraryHeaderCSElements pLibraryHeaderCS;
	private final MappingBodyCSElements pMappingBodyCS;
	private final MappingCallExpCSElements pMappingCallExpCS;
	private final MappingOperationCSElements pMappingOperationCS;
	private final MappingDeclarationCSElements pMappingDeclarationCS;
	private final MappingDefinitionCSElements pMappingDefinitionCS;
	private final MappingOperationHeaderCSElements pMappingOperationHeaderCS;
	private final MetamodelCSElements pMetamodelCS;
	private final ModelTypeCSElements pModelTypeCS;
	private final ModelTypeRefCSElements pModelTypeRefCS;
	private final ModuleOperationCSElements pModuleOperationCS;
	private final ModulePropertyCSElements pModulePropertyCS;
	private final ModuleRefCSElements pModuleRefCS;
	private final ModuleUsageCSElements pModuleUsageCS;
	private final ObjectExpCSElements pObjectExpCS;
	private final ObjectVariableCSElements pObjectVariableCS;
	private final OperationRefCSElements pOperationRefCS;
	private final PackageRefCSElements pPackageRefCS;
	private final ParameterCSElements pParameterCS;
	private final ParameterDeclarationCSElements pParameterDeclarationCS;
	private final QVToClassCSElements pQVToClassCS;
	private final ResolveExpCSElements pResolveExpCS;
	private final ResolveByTypeExpCSElements pResolveByTypeExpCS;
	private final ResolveByMappingExpCSElements pResolveByMappingExpCS;
	private final SimpleOperationBodyCSElements pSimpleOperationBodyCS;
	private final StereotypeQualifierCSElements pStereotypeQualifierCS;
	private final TagCSElements pTagCS;
	private final TransformationCSElements pTransformationCS;
	private final TransformationDeclCSElements pTransformationDeclCS;
	private final TransformationDefCSElements pTransformationDefCS;
	private final TransformationHeaderCSElements pTransformationHeaderCS;
	private final TypeSelectorCSElements pTypeSelectorCS;
	private final UnitPackageCSElements pUnitPackageCS;
	private final UnitRefCSElements pUnitRefCS;
	private final UnitTypeCSElements pUnitTypeCS;
	
	private final Grammar grammar;

	private final ImperativeOCLGrammarAccess gaImperativeOCL;

	@Inject
	public QVTOperationalGrammarAccess(GrammarProvider grammarProvider,
		ImperativeOCLGrammarAccess gaImperativeOCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaImperativeOCL = gaImperativeOCL;
		this.pTopLevelCS = new TopLevelCSElements();
		this.unknownRuleMetamodelKindCS = new MetamodelKindCSElements();
		this.unknownRuleDirectionKindCS = new DirectionKindCSElements();
		this.unknownRuleImportKindCS = new ImportKindCSElements();
		this.unknownRuleModuleKindCS = new ModuleKindCSElements();
		this.pTransformationQualifier = new TransformationQualifierElements();
		this.pLibraryQualifier = new LibraryQualifierElements();
		this.pFeatureQualifier = new FeatureQualifierElements();
		this.pOperationQualifier = new OperationQualifierElements();
		this.pMultiplicityCS = new MultiplicityCSElements();
		this.pPathName2CS = new PathName2CSElements();
		this.pPathElement2CS = new PathElement2CSElements();
		this.pTypedMultiplicityRef2CS = new TypedMultiplicityRef2CSElements();
		this.pTypeRefCS = new TypeRefCSElements();
		this.pTypedRef2CS = new TypedRef2CSElements();
		this.pTypedTypeRef2CS = new TypedTypeRef2CSElements();
		this.pClassCS = new ClassCSElements();
		this.pClassifierOperationCS = new ClassifierOperationCSElements();
		this.pClassifierPropertyCS = new ClassifierPropertyCSElements();
		this.pCompoundOperationBodyCS = new CompoundOperationBodyCSElements();
		this.pConfigurationPropertyCS = new ConfigurationPropertyCSElements();
		this.pContextualPropertyCS = new ContextualPropertyCSElements();
		this.pConstructorCS = new ConstructorCSElements();
		this.pConstructorDeclarationCS = new ConstructorDeclarationCSElements();
		this.pConstructorDefinitionCS = new ConstructorDefinitionCSElements();
		this.pConstructorHeaderCS = new ConstructorHeaderCSElements();
		this.pDataTypeCS = new DataTypeCSElements();
		this.pEntryOperationCS = new EntryOperationCSElements();
		this.pEnumerationCS = new EnumerationCSElements();
		this.pEnumerationLiteralCS = new EnumerationLiteralCSElements();
		this.pExceptionCS = new ExceptionCSElements();
		this.pHelperCS = new HelperCSElements();
		this.pHelperDeclarationCS = new HelperDeclarationCSElements();
		this.pHelperHeaderCS = new HelperHeaderCSElements();
		this.pHelperDefinitionCS = new HelperDefinitionCSElements();
		this.pHelperSimpleDefinitionCS = new HelperSimpleDefinitionCSElements();
		this.pHelperCompoundDefinitionCS = new HelperCompoundDefinitionCSElements();
		this.pImportCS = new ImportCSElements();
		this.pInitPartCS = new InitPartCSElements();
		this.pLibraryCS = new LibraryCSElements();
		this.pLibraryDeclCS = new LibraryDeclCSElements();
		this.pLibraryDefCS = new LibraryDefCSElements();
		this.pLibraryHeaderCS = new LibraryHeaderCSElements();
		this.pMappingBodyCS = new MappingBodyCSElements();
		this.pMappingCallExpCS = new MappingCallExpCSElements();
		this.pMappingOperationCS = new MappingOperationCSElements();
		this.pMappingDeclarationCS = new MappingDeclarationCSElements();
		this.pMappingDefinitionCS = new MappingDefinitionCSElements();
		this.pMappingOperationHeaderCS = new MappingOperationHeaderCSElements();
		this.pMetamodelCS = new MetamodelCSElements();
		this.pModelTypeCS = new ModelTypeCSElements();
		this.pModelTypeRefCS = new ModelTypeRefCSElements();
		this.pModuleOperationCS = new ModuleOperationCSElements();
		this.pModulePropertyCS = new ModulePropertyCSElements();
		this.pModuleRefCS = new ModuleRefCSElements();
		this.pModuleUsageCS = new ModuleUsageCSElements();
		this.pObjectExpCS = new ObjectExpCSElements();
		this.pObjectVariableCS = new ObjectVariableCSElements();
		this.pOperationRefCS = new OperationRefCSElements();
		this.pPackageRefCS = new PackageRefCSElements();
		this.pParameterCS = new ParameterCSElements();
		this.pParameterDeclarationCS = new ParameterDeclarationCSElements();
		this.pQVToClassCS = new QVToClassCSElements();
		this.pResolveExpCS = new ResolveExpCSElements();
		this.pResolveByTypeExpCS = new ResolveByTypeExpCSElements();
		this.pResolveByMappingExpCS = new ResolveByMappingExpCSElements();
		this.pSimpleOperationBodyCS = new SimpleOperationBodyCSElements();
		this.pStereotypeQualifierCS = new StereotypeQualifierCSElements();
		this.pTagCS = new TagCSElements();
		this.pTransformationCS = new TransformationCSElements();
		this.pTransformationDeclCS = new TransformationDeclCSElements();
		this.pTransformationDefCS = new TransformationDefCSElements();
		this.pTransformationHeaderCS = new TransformationHeaderCSElements();
		this.pTypeSelectorCS = new TypeSelectorCSElements();
		this.pUnitPackageCS = new UnitPackageCSElements();
		this.pUnitRefCS = new UnitRefCSElements();
		this.pUnitTypeCS = new UnitTypeCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.qvto.examples.xtext.qvtoperational.QVTOperational".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ImperativeOCLGrammarAccess getImperativeOCLGrammarAccess() {
		return gaImperativeOCL;
	}

	
	//TopLevelCS:
	//	ownedImports+=ImportCS* (ownedPackages+=UnitPackageCS | ownedTypes+=UnitTypeCS | ownedAnnotations+=TagCS)*;
	public TopLevelCSElements getTopLevelCSAccess() {
		return pTopLevelCS;
	}
	
	public ParserRule getTopLevelCSRule() {
		return getTopLevelCSAccess().getRule();
	}

	//enum MetamodelKindCS:
	//	metamodel | package;
	public MetamodelKindCSElements getMetamodelKindCSAccess() {
		return unknownRuleMetamodelKindCS;
	}
	
	public EnumRule getMetamodelKindCSRule() {
		return getMetamodelKindCSAccess().getRule();
	}

	//enum DirectionKindCS:
	//	in | out | inout;
	public DirectionKindCSElements getDirectionKindCSAccess() {
		return unknownRuleDirectionKindCS;
	}
	
	public EnumRule getDirectionKindCSRule() {
		return getDirectionKindCSAccess().getRule();
	}

	//enum ImportKindCS:
	//	access | extension="extends";
	public ImportKindCSElements getImportKindCSAccess() {
		return unknownRuleImportKindCS;
	}
	
	public EnumRule getImportKindCSRule() {
		return getImportKindCSAccess().getRule();
	}

	//enum ModuleKindCS:
	//	library | transformation;
	public ModuleKindCSElements getModuleKindCSAccess() {
		return unknownRuleModuleKindCS;
	}
	
	public EnumRule getModuleKindCSRule() {
		return getModuleKindCSAccess().getRule();
	}

	//// FIXME use a CS element and unordered groups
	// TransformationQualifier returns ecore::EString:
	//	"blackbox" | "abstract" | "static";
	public TransformationQualifierElements getTransformationQualifierAccess() {
		return pTransformationQualifier;
	}
	
	public ParserRule getTransformationQualifierRule() {
		return getTransformationQualifierAccess().getRule();
	}

	//LibraryQualifier returns ecore::EString:
	//	"blackbox";
	public LibraryQualifierElements getLibraryQualifierAccess() {
		return pLibraryQualifier;
	}
	
	public ParserRule getLibraryQualifierRule() {
		return getLibraryQualifierAccess().getRule();
	}

	//FeatureQualifier returns ecore::EString:
	//	"composes" | "references" | "readonly" | "derived" | "static";
	public FeatureQualifierElements getFeatureQualifierAccess() {
		return pFeatureQualifier;
	}
	
	public ParserRule getFeatureQualifierRule() {
		return getFeatureQualifierAccess().getRule();
	}

	//OperationQualifier returns ecore::EString:
	//	"blackbox" | "abstract" | "static";
	public OperationQualifierElements getOperationQualifierAccess() {
		return pOperationQualifier;
	}
	
	public ParserRule getOperationQualifierRule() {
		return getOperationQualifierAccess().getRule();
	}

	//// ****** OCL redifinitions ****** //
	// // FIXME review this redefiniton. 
	// MultiplicityCS returns
	//base::MultiplicityBoundsCS:
	//	"[" (lowerBound=LOWER "...")? upperBound=UPPER "]";
	public MultiplicityCSElements getMultiplicityCSAccess() {
		return pMultiplicityCS;
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//PathName2CS:
	//	ownedPathElements2+=PathElement2CS ("::" ownedPathElements2+=PathElement2CS)*;
	public PathName2CSElements getPathName2CSAccess() {
		return pPathName2CS;
	}
	
	public ParserRule getPathName2CSRule() {
		return getPathName2CSAccess().getRule();
	}

	//PathElement2CS:
	//	name=UnrestrictedName;
	public PathElement2CSElements getPathElement2CSAccess() {
		return pPathElement2CS;
	}
	
	public ParserRule getPathElement2CSRule() {
		return getPathElement2CSAccess().getRule();
	}

	//TypedMultiplicityRef2CS returns base::TypedRefCS:
	//	TypedRef2CS ownedMultiplicity=MultiplicityCS?;
	public TypedMultiplicityRef2CSElements getTypedMultiplicityRef2CSAccess() {
		return pTypedMultiplicityRef2CS;
	}
	
	public ParserRule getTypedMultiplicityRef2CSRule() {
		return getTypedMultiplicityRef2CSAccess().getRule();
	}

	//// FIXME deviation from OCLInEcore. No templates parameter, yet
	// TypeRefCS returns base::TypeRefCS:
	//// | WildcardTypeRefCS
	// TypedRef2CS;
	public TypeRefCSElements getTypeRefCSAccess() {
		return pTypeRefCS;
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}

	//TypedRef2CS returns base::TypedRefCS:
	//	TypeLiteralCS | TypedTypeRef2CS;
	public TypedRef2CSElements getTypedRef2CSAccess() {
		return pTypedRef2CS;
	}
	
	public ParserRule getTypedRef2CSRule() {
		return getTypedRef2CSAccess().getRule();
	}

	//TypedTypeRef2CS:
	//	ownedPathName=PathName2CS ("(" ownedBinding=TemplateBindingCS ")")? ("@" extentLocation=UnrestrictedName)?;
	public TypedTypeRef2CSElements getTypedTypeRef2CSAccess() {
		return pTypedTypeRef2CS;
	}
	
	public ParserRule getTypedTypeRef2CSRule() {
		return getTypedTypeRef2CSAccess().getRule();
	}

	//// ****** QVTo ******
	// ClassCS returns base::ClassCS:
	//	(DataTypeCS | ExceptionCS | QVToClassCS) ";"?;
	public ClassCSElements getClassCSAccess() {
		return pClassCS;
	}
	
	public ParserRule getClassCSRule() {
		return getClassCSAccess().getRule();
	}

	//ClassifierOperationCS returns QVToOperationCS:
	//	ownedStereotype=StereotypeQualifierCS? qualifiers+=FeatureQualifier* name=UnrestrictedName "("
	//	(ownedParameters+=ParameterCS ("," ownedParameters+=ParameterCS)*)? ")" (":" ownedType=TypedMultiplicityRef2CS)?;
	public ClassifierOperationCSElements getClassifierOperationCSAccess() {
		return pClassifierOperationCS;
	}
	
	public ParserRule getClassifierOperationCSRule() {
		return getClassifierOperationCSAccess().getRule();
	}

	//ClassifierPropertyCS:
	//	ownedStereotype=StereotypeQualifierCS? qualifiers+=FeatureQualifier* name=UnrestrictedName ":"
	//	ownedType=TypedMultiplicityRef2CS default=SINGLE_QUOTED_STRING?
	//	// FIXME QVTO syntax define a more complex InitPartCS	
	// ("opposites" "~"? opposite=Identifier)? // FIXME 
	//;
	public ClassifierPropertyCSElements getClassifierPropertyCSAccess() {
		return pClassifierPropertyCS;
	}
	
	public ParserRule getClassifierPropertyCSRule() {
		return getClassifierPropertyCSAccess().getRule();
	}

	//CompoundOperationBodyCS returns OperationBodyCS:
	//	{OperationBodyCS} "{" ownedContentExps+=ExpressionStatementCS* "}";
	public CompoundOperationBodyCSElements getCompoundOperationBodyCSAccess() {
		return pCompoundOperationBodyCS;
	}
	
	public ParserRule getCompoundOperationBodyCSRule() {
		return getCompoundOperationBodyCSAccess().getRule();
	}

	//ConfigurationPropertyCS:
	//	"configuration" "property" ownedScopedName=PathName2CS ":" ownedType=TypeLiteralCS
	//	// FIXME OMG issue: allow default values for configuration properties
	// "=" default=StringLiteral;
	public ConfigurationPropertyCSElements getConfigurationPropertyCSAccess() {
		return pConfigurationPropertyCS;
	}
	
	public ParserRule getConfigurationPropertyCSRule() {
		return getConfigurationPropertyCSAccess().getRule();
	}

	//ContextualPropertyCS:
	//	"intermediate" "property" ownedScopedName=PathName2CS ":" ownedType=TypedMultiplicityRef2CS ("="
	//	ownedInitExp=ExpCS)?;
	public ContextualPropertyCSElements getContextualPropertyCSAccess() {
		return pContextualPropertyCS;
	}
	
	public ParserRule getContextualPropertyCSRule() {
		return getContextualPropertyCSAccess().getRule();
	}

	//ConstructorCS returns ConstructorOperationCS:
	//	ConstructorDeclarationCS | ConstructorDefinitionCS;
	public ConstructorCSElements getConstructorCSAccess() {
		return pConstructorCS;
	}
	
	public ParserRule getConstructorCSRule() {
		return getConstructorCSAccess().getRule();
	}

	//ConstructorDeclarationCS returns ConstructorOperationCS:
	//	ConstructorHeaderCS ";";
	public ConstructorDeclarationCSElements getConstructorDeclarationCSAccess() {
		return pConstructorDeclarationCS;
	}
	
	public ParserRule getConstructorDeclarationCSRule() {
		return getConstructorDeclarationCSAccess().getRule();
	}

	//ConstructorDefinitionCS returns ConstructorOperationCS:
	//	ConstructorHeaderCS ownedBody=CompoundOperationBodyCS ";"?;
	public ConstructorDefinitionCSElements getConstructorDefinitionCSAccess() {
		return pConstructorDefinitionCS;
	}
	
	public ParserRule getConstructorDefinitionCSRule() {
		return getConstructorDefinitionCSAccess().getRule();
	}

	//ConstructorHeaderCS returns ConstructorOperationCS:
	//	qualifiers+=OperationQualifier* "constructor" ownedScopedName=PathName2CS "(" (ownedParameters+=ParameterCS (","
	//	ownedParameters+=ParameterCS)*)? ")";
	public ConstructorHeaderCSElements getConstructorHeaderCSAccess() {
		return pConstructorHeaderCS;
	}
	
	public ParserRule getConstructorHeaderCSRule() {
		return getConstructorHeaderCSAccess().getRule();
	}

	//DataTypeCS returns base::DataTypeCS:
	//	("datatype" | {PrimitiveTypeCS} "primitive") name=UnrestrictedName;
	public DataTypeCSElements getDataTypeCSAccess() {
		return pDataTypeCS;
	}
	
	public ParserRule getDataTypeCSRule() {
		return getDataTypeCSAccess().getRule();
	}

	//EntryOperationCS:
	//	"main" "(" ")" ownedBody=CompoundOperationBodyCS ";"?;
	public EntryOperationCSElements getEntryOperationCSAccess() {
		return pEntryOperationCS;
	}
	
	public ParserRule getEntryOperationCSRule() {
		return getEntryOperationCSAccess().getRule();
	}

	//// FIXME Deviation from official grammar
	// EnumerationCS returns base::EnumerationCS:
	//	"enum" name=Identifier ("{" (ownedLiterals+=EnumerationLiteralCS ("," ownedLiterals+=EnumerationLiteralCS)*) "}")
	//	";"?;
	public EnumerationCSElements getEnumerationCSAccess() {
		return pEnumerationCS;
	}
	
	public ParserRule getEnumerationCSRule() {
		return getEnumerationCSAccess().getRule();
	}

	//EnumerationLiteralCS returns base::EnumerationLiteralCS:
	//	name=UnrestrictedName;
	public EnumerationLiteralCSElements getEnumerationLiteralCSAccess() {
		return pEnumerationLiteralCS;
	}
	
	public ParserRule getEnumerationLiteralCSRule() {
		return getEnumerationLiteralCSAccess().getRule();
	}

	//// FIXME for the time being, exception is another class
	// ExceptionCS returns base::StructuredClassCS:
	//	"exception" name=UnrestrictedName ("extends" (ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))?;
	public ExceptionCSElements getExceptionCSAccess() {
		return pExceptionCS;
	}
	
	public ParserRule getExceptionCSRule() {
		return getExceptionCSAccess().getRule();
	}

	//HelperCS returns HelperOperationCS:
	//	HelperDeclarationCS | HelperDefinitionCS;
	public HelperCSElements getHelperCSAccess() {
		return pHelperCS;
	}
	
	public ParserRule getHelperCSRule() {
		return getHelperCSAccess().getRule();
	}

	//HelperDeclarationCS returns HelperOperationCS:
	//	HelperHeaderCS ";";
	public HelperDeclarationCSElements getHelperDeclarationCSAccess() {
		return pHelperDeclarationCS;
	}
	
	public ParserRule getHelperDeclarationCSRule() {
		return getHelperDeclarationCSAccess().getRule();
	}

	//HelperHeaderCS returns HelperOperationCS:
	//	qualifiers+=OperationQualifier* ("helper" | isQuery?="query") ownedScopedName=PathName2CS "{"
	//	(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)? ")" (":"
	//	ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))?;
	public HelperHeaderCSElements getHelperHeaderCSAccess() {
		return pHelperHeaderCS;
	}
	
	public ParserRule getHelperHeaderCSRule() {
		return getHelperHeaderCSAccess().getRule();
	}

	//HelperDefinitionCS returns HelperOperationCS:
	//	HelperSimpleDefinitionCS | HelperCompoundDefinitionCS;
	public HelperDefinitionCSElements getHelperDefinitionCSAccess() {
		return pHelperDefinitionCS;
	}
	
	public ParserRule getHelperDefinitionCSRule() {
		return getHelperDefinitionCSAccess().getRule();
	}

	//HelperSimpleDefinitionCS returns HelperOperationCS:
	//	HelperHeaderCS ownedBody=SimpleOperationBodyCS ";";
	public HelperSimpleDefinitionCSElements getHelperSimpleDefinitionCSAccess() {
		return pHelperSimpleDefinitionCS;
	}
	
	public ParserRule getHelperSimpleDefinitionCSRule() {
		return getHelperSimpleDefinitionCSAccess().getRule();
	}

	//HelperCompoundDefinitionCS returns HelperOperationCS:
	//	HelperHeaderCS ownedBody=CompoundOperationBodyCS ";"?;
	public HelperCompoundDefinitionCSElements getHelperCompoundDefinitionCSAccess() {
		return pHelperCompoundDefinitionCS;
	}
	
	public ParserRule getHelperCompoundDefinitionCSRule() {
		return getHelperCompoundDefinitionCSAccess().getRule();
	}

	//ImportCS returns QVToImportCS:
	//	"import" ownedUnitRef=UnitRefCS ";" | "from" ownedUnitRef=UnitRefCS "import" (importedUnitElement+=Identifier (","
	//	importedUnitElement+=Identifier)* | isAll?="*") ";";
	public ImportCSElements getImportCSAccess() {
		return pImportCS;
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	//InitPartCS:
	//	initOp=InitOpCS ownedExp=ExpCS;
	public InitPartCSElements getInitPartCSAccess() {
		return pInitPartCS;
	}
	
	public ParserRule getInitPartCSRule() {
		return getInitPartCSAccess().getRule();
	}

	//LibraryCS returns QVToLibraryCS:
	//	LibraryDeclCS | LibraryDefCS;
	public LibraryCSElements getLibraryCSAccess() {
		return pLibraryCS;
	}
	
	public ParserRule getLibraryCSRule() {
		return getLibraryCSAccess().getRule();
	}

	//LibraryDeclCS returns QVToLibraryCS:
	//	LibraryHeaderCS ";";
	public LibraryDeclCSElements getLibraryDeclCSAccess() {
		return pLibraryDeclCS;
	}
	
	public ParserRule getLibraryDeclCSRule() {
		return getLibraryDeclCSAccess().getRule();
	}

	//LibraryDefCS returns QVToLibraryCS:
	//	LibraryHeaderCS "{" (ownedProperties+=ModulePropertyCS | ownedOperations+=ModuleOperationCS |
	//	ownedAnnotations+=TagCS)* "}" ";"?;
	public LibraryDefCSElements getLibraryDefCSAccess() {
		return pLibraryDefCS;
	}
	
	public ParserRule getLibraryDefCSRule() {
		return getLibraryDefCSAccess().getRule();
	}

	//LibraryHeaderCS returns QVToLibraryCS:
	//	ownedQualifiers+=LibraryQualifier* "library" name=UnrestrictedName "(" ownedParameters+=ModelTypeRefCS (","
	//	ownedParameters+=ModelTypeRefCS)* ")" ownedModuleUsages+=ModuleUsageCS*;
	public LibraryHeaderCSElements getLibraryHeaderCSAccess() {
		return pLibraryHeaderCS;
	}
	
	public ParserRule getLibraryHeaderCSRule() {
		return getLibraryHeaderCSAccess().getRule();
	}

	//MappingBodyCS:
	//	{MappingBodyCS} ("init" "{" ownedInitExps+=ExpCS "}")? (hasPopulationKeyword?="population"? "{"
	//	ownedContentExps+=ExpCS* "}" | ownedContentExps+=ExpCS) ("end" "{" ownedEndExps+=ExpCS "}")?;
	public MappingBodyCSElements getMappingBodyCSAccess() {
		return pMappingBodyCS;
	}
	
	public ParserRule getMappingBodyCSRule() {
		return getMappingBodyCSAccess().getRule();
	}

	//// FIXME OMG: the following seems wrong
	//
	//// "Note that the omission of the source is a shorthand in terms of the execution semantics - the source is the transformation
	//
	//// class itself, denoted by ‘this,’ but not in terms of the metamodel representation: the OperationCallExp::source
	//
	//// property may be left empty."
	// // 
	//
	//// The invoked operation call should refer (as a source) to the transformation/class in which the call took place
	// //
	//
	//// also ImperativeCallExp::isVirtual doesn't seem to be needed, as this concern should belong to OCL. In OCL, an operation call
	//
	//// can also statically refer to a declared operation, otherwise it needs to be dynamically dispatched. 
	// //
	//
	//// ImperativeCallExpCS: NameExpCS;
	// MappingCallExpCS:
	//	("map" | isStrict?="xmap") ownedPathName=PathNameCS ownedRoundBracketedClause=RoundBracketedClauseCS;
	public MappingCallExpCSElements getMappingCallExpCSAccess() {
		return pMappingCallExpCS;
	}
	
	public ParserRule getMappingCallExpCSRule() {
		return getMappingCallExpCSAccess().getRule();
	}

	//MappingOperationCS:
	//	MappingDeclarationCS | MappingDefinitionCS;
	public MappingOperationCSElements getMappingOperationCSAccess() {
		return pMappingOperationCS;
	}
	
	public ParserRule getMappingOperationCSRule() {
		return getMappingOperationCSAccess().getRule();
	}

	//MappingDeclarationCS returns MappingOperationCS:
	//	MappingOperationHeaderCS ";";
	public MappingDeclarationCSElements getMappingDeclarationCSAccess() {
		return pMappingDeclarationCS;
	}
	
	public ParserRule getMappingDeclarationCSRule() {
		return getMappingDeclarationCSAccess().getRule();
	}

	//MappingDefinitionCS returns MappingOperationCS:
	//	MappingOperationHeaderCS "{" ownedBody=MappingBodyCS "}";
	public MappingDefinitionCSElements getMappingDefinitionCSAccess() {
		return pMappingDefinitionCS;
	}
	
	public ParserRule getMappingDefinitionCSRule() {
		return getMappingDefinitionCSAccess().getRule();
	}

	//MappingOperationHeaderCS returns MappingOperationCS:
	//	qualifiers+=OperationQualifier* "mapping" direction=DirectionKindCS? ownedScopedName=PathName2CS "("
	//	(ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)*)? ")" (":"
	//	ownedResults+=ParameterDeclarationCS ("," ownedResults+=ParameterDeclarationCS))? (("inherits"
	//	ownedInheritRefs+=OperationRefCS ("," ownedInheritRefs+=OperationRefCS)*)? & ("merges" ownedMergeRefs+=OperationRefCS
	//	("," ownedMergeRefs+=OperationRefCS)*)? & ("disjuncts" ownedDisjunctRefs+=OperationRefCS (","
	//	ownedDisjunctRefs+=OperationRefCS)*)? & ("refines" ownedRefinedRule=PathName2CS)?) ("when" "{" ownedWhenExps+=ExpCS*
	//	"}")? ("where" "{" ownedWhereExps+=ExpressionBlockCS* "}")?;
	public MappingOperationHeaderCSElements getMappingOperationHeaderCSAccess() {
		return pMappingOperationHeaderCS;
	}
	
	public ParserRule getMappingOperationHeaderCSRule() {
		return getMappingOperationHeaderCSAccess().getRule();
	}

	//// MetamodelKind provides extra semantic, we need to retain the kind 
	// MetamodelCS:
	//	metamodelKind=MetamodelKindCS name=UnrestrictedName "{" (ownedClasses+=ClassCS
	//	// FIXME QVTo grammar distincts classifier from enumeration
	// | ownedClasses+=EnumerationCS |
	//	ownedAnnotations+=TagCS)* "}" ";"?;
	public MetamodelCSElements getMetamodelCSAccess() {
		return pMetamodelCS;
	}
	
	public ParserRule getMetamodelCSRule() {
		return getMetamodelCSAccess().getRule();
	}

	//ModelTypeCS:
	//	"modeltype" name=UnrestrictedName complianceKind=StringLiteral? "uses" ownedPackageRefs+=PackageRefCS (","
	//	ownedPackageRefs+=PackageRefCS)* ("where" "{" (ownedConditions+=ExpCS (";" ownedConditions+=ExpCS)* ";"?)? "}")? ";";
	public ModelTypeCSElements getModelTypeCSAccess() {
		return pModelTypeCS;
	}
	
	public ParserRule getModelTypeCSRule() {
		return getModelTypeCSAccess().getRule();
	}

	//ModelTypeRefCS:
	//	ownedType=TypedTypeRef2CS;
	public ModelTypeRefCSElements getModelTypeRefCSAccess() {
		return pModelTypeRefCS;
	}
	
	public ParserRule getModelTypeRefCSRule() {
		return getModelTypeRefCSAccess().getRule();
	}

	//ModuleOperationCS returns ImperativeOperationCS:
	//	EntryOperationCS | MappingOperationCS | HelperCS | ConstructorCS;
	public ModuleOperationCSElements getModuleOperationCSAccess() {
		return pModuleOperationCS;
	}
	
	public ParserRule getModuleOperationCSRule() {
		return getModuleOperationCSAccess().getRule();
	}

	//ModulePropertyCS:
	//	ConfigurationPropertyCS | ContextualPropertyCS;
	public ModulePropertyCSElements getModulePropertyCSAccess() {
		return pModulePropertyCS;
	}
	
	public ParserRule getModulePropertyCSRule() {
		return getModulePropertyCSAccess().getRule();
	}

	//ModuleRefCS:
	//	ownedScopedName=PathName2CS ("(" ownedParameters+=ParameterDeclarationCS (","
	//	ownedParameters+=ParameterDeclarationCS)* ")")?;
	public ModuleRefCSElements getModuleRefCSAccess() {
		return pModuleRefCS;
	}
	
	public ParserRule getModuleRefCSRule() {
		return getModuleRefCSAccess().getRule();
	}

	//ModuleUsageCS:
	//	importKind=ImportKindCS moduleKind=ModuleKindCS? ownedModuleRefs+=ModuleRefCS ("," ownedModuleRefs+=ModuleRefCS)*;
	public ModuleUsageCSElements getModuleUsageCSAccess() {
		return pModuleUsageCS;
	}
	
	public ParserRule getModuleUsageCSRule() {
		return getModuleUsageCSAccess().getRule();
	}

	//ObjectExpCS:
	//	"object" ("(" ownedIterator=VarDeclarationNoInitCS ")")? ownedVariable=ObjectVariableCS ("@"
	//	ownedExtentRef=ExtentRefCS)? "{" ownedExps+=ExpCS* "}";
	public ObjectExpCSElements getObjectExpCSAccess() {
		return pObjectExpCS;
	}
	
	public ParserRule getObjectExpCSRule() {
		return getObjectExpCSAccess().getRule();
	}

	//ObjectVariableCS returns essentialocl::VariableCS:
	//	name=UnrestrictedName ":" ownedType=TypedTypeRef2CS? | ownedType=TypedTypeRef2CS;
	public ObjectVariableCSElements getObjectVariableCSAccess() {
		return pObjectVariableCS;
	}
	
	public ParserRule getObjectVariableCSRule() {
		return getObjectVariableCSAccess().getRule();
	}

	//OperationRefCS:
	//	ownedPathName=PathName2CS;
	public OperationRefCSElements getOperationRefCSAccess() {
		return pOperationRefCS;
	}
	
	public ParserRule getOperationRefCSRule() {
		return getOperationRefCSAccess().getRule();
	}

	//PackageRefCS:
	//	uri=StringLiteral | ownedScopedName=PathName2CS "(" uri=StringLiteral ")";
	public PackageRefCSElements getPackageRefCSAccess() {
		return pPackageRefCS;
	}
	
	public ParserRule getPackageRefCSRule() {
		return getPackageRefCSAccess().getRule();
	}

	//ParameterCS returns base::ParameterCS:
	//	name=UnrestrictedName (":" ownedType=TypedMultiplicityRef2CS)?;
	public ParameterCSElements getParameterCSAccess() {
		return pParameterCS;
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}

	//ParameterDeclarationCS:
	//	direction=DirectionKindCS? name= // FIXME Spec grammar says that you can have just a typeSpec
	// UnrestrictedName (":"
	//	ownedType=TypedMultiplicityRef2CS)? ownedInitPart=InitPartCS?;
	public ParameterDeclarationCSElements getParameterDeclarationCSAccess() {
		return pParameterDeclarationCS;
	}
	
	public ParserRule getParameterDeclarationCSRule() {
		return getParameterDeclarationCSAccess().getRule();
	}

	//QVToClassCS:
	//	isIntermediate?="intermediate"? // FIXME qualifier += Qualifier*
	// "class" name=UnrestrictedName ("extends"
	//	(ownedSuperTypes+=TypedRefCS ("," ownedSuperTypes+=TypedRefCS)*))? ("{" ((ownedProperties+=ClassifierPropertyCS |
	//	ownedOperations+=ClassifierOperationCS | ownedAnnotations+=TagCS) ";")+ "}")?;
	public QVToClassCSElements getQVToClassCSAccess() {
		return pQVToClassCS;
	}
	
	public ParserRule getQVToClassCSRule() {
		return getQVToClassCSAccess().getRule();
	}

	//// FIXME NameExpCS ???
	// ResolveExpCS:
	//	ResolveByTypeExpCS | ResolveByMappingExpCS;
	public ResolveExpCSElements getResolveExpCSAccess() {
		return pResolveExpCS;
	}
	
	public ParserRule getResolveExpCSRule() {
		return getResolveExpCSAccess().getRule();
	}

	//ResolveByTypeExpCS:
	//	isDeferred?="late"? name=("resolve" | "resolveone" | "resolveinv" | "resolveinvone") "(" ownedTarget=TypeSelectorCS
	//	("|" ownedCondition=ExpCS)? ")";
	public ResolveByTypeExpCSElements getResolveByTypeExpCSAccess() {
		return pResolveByTypeExpCS;
	}
	
	public ParserRule getResolveByTypeExpCSRule() {
		return getResolveByTypeExpCSAccess().getRule();
	}

	//ResolveByMappingExpCS:
	//	isDeferred?="late"? name=("resolveIn" | "resolveoneIn" | "resolveinvIn" | "resolveinvoneIn") "("
	//	ownedMappingRef=OperationRefCS ("," ownedTarget=VarDeclarationNoInitCS "|" ownedCondition=ExpCS)? ")";
	public ResolveByMappingExpCSElements getResolveByMappingExpCSAccess() {
		return pResolveByMappingExpCS;
	}
	
	public ParserRule getResolveByMappingExpCSRule() {
		return getResolveByMappingExpCSAccess().getRule();
	}

	//SimpleOperationBodyCS returns OperationBodyCS:
	//	"=" ownedContentExps+=ExpCS;
	public SimpleOperationBodyCSElements getSimpleOperationBodyCSAccess() {
		return pSimpleOperationBodyCS;
	}
	
	public ParserRule getSimpleOperationBodyCSRule() {
		return getSimpleOperationBodyCSAccess().getRule();
	}

	//StereotypeQualifierCS:
	//	"<<" (stereotypes+=Identifier ("," stereotypes+=Identifier)*) ">>";
	public StereotypeQualifierCSElements getStereotypeQualifierCSAccess() {
		return pStereotypeQualifierCS;
	}
	
	public ParserRule getStereotypeQualifierCSRule() {
		return getStereotypeQualifierCSAccess().getRule();
	}

	//TagCS:
	//	"tag" name=(UnrestrictedName | SINGLE_QUOTED_STRING)? ownedElementPath=PathName2CS ("=" ownedExpression=ExpCS)? ";";
	public TagCSElements getTagCSAccess() {
		return pTagCS;
	}
	
	public ParserRule getTagCSRule() {
		return getTagCSAccess().getRule();
	}

	//TransformationCS:
	//	TransformationDeclCS | TransformationDefCS;
	public TransformationCSElements getTransformationCSAccess() {
		return pTransformationCS;
	}
	
	public ParserRule getTransformationCSRule() {
		return getTransformationCSAccess().getRule();
	}

	//TransformationDeclCS returns TransformationCS:
	//	TransformationHeaderCS ";";
	public TransformationDeclCSElements getTransformationDeclCSAccess() {
		return pTransformationDeclCS;
	}
	
	public ParserRule getTransformationDeclCSRule() {
		return getTransformationDeclCSAccess().getRule();
	}

	//TransformationDefCS returns TransformationCS:
	//	TransformationHeaderCS "{" (ownedProperties+=ModulePropertyCS
	//	// (ownedClasses+= ModuleTypeCS)* FIXME Transformation is not a package anymore. Not allowed
	// |
	//	ownedOperations+=ModuleOperationCS | ownedAnnotations+=TagCS)* "}" ";"?;
	public TransformationDefCSElements getTransformationDefCSAccess() {
		return pTransformationDefCS;
	}
	
	public ParserRule getTransformationDefCSRule() {
		return getTransformationDefCSAccess().getRule();
	}

	//TransformationHeaderCS returns TransformationCS:
	//	ownedQualifiers+=TransformationQualifier* "transformation" name=UnrestrictedName "("
	//	ownedParameters+=ParameterDeclarationCS ("," ownedParameters+=ParameterDeclarationCS)* ")"
	//	ownedModuleUsages+=ModuleUsageCS* ("refines" ownedRefinedModule=ModuleRefCS)?;
	public TransformationHeaderCSElements getTransformationHeaderCSAccess() {
		return pTransformationHeaderCS;
	}
	
	public ParserRule getTransformationHeaderCSRule() {
		return getTransformationHeaderCSAccess().getRule();
	}

	//// typedefs are deprecated
	//
	//// TypedefCS: 'typedef' name=Identifier '=' typespec=TypeExpCS ('[' condition=ExpCS ']')? ';';
	// TypeSelectorCS returns
	//essentialocl::VariableCS:
	//	(name=UnrestrictedName ":")? ownedType=TypedRef2CS;
	public TypeSelectorCSElements getTypeSelectorCSAccess() {
		return pTypeSelectorCS;
	}
	
	public ParserRule getTypeSelectorCSRule() {
		return getTypeSelectorCSAccess().getRule();
	}

	//UnitPackageCS returns base::PackageCS:
	//	MetamodelCS;
	public UnitPackageCSElements getUnitPackageCSAccess() {
		return pUnitPackageCS;
	}
	
	public ParserRule getUnitPackageCSRule() {
		return getUnitPackageCSAccess().getRule();
	}

	//// FIXME review these units and specially the metamodel UnitRefCS
	// UnitRefCS:
	//	segment+=Identifier ("." segment+=Identifier)*;
	public UnitRefCSElements getUnitRefCSAccess() {
		return pUnitRefCS;
	}
	
	public ParserRule getUnitRefCSRule() {
		return getUnitRefCSAccess().getRule();
	}

	//UnitTypeCS returns base::TypeCS:
	//	ModelTypeCS | TransformationCS | LibraryCS;
	public UnitTypeCSElements getUnitTypeCSAccess() {
		return pUnitTypeCS;
	}
	
	public ParserRule getUnitTypeCSRule() {
		return getUnitTypeCSAccess().getRule();
	}

	//GrammmarCS returns essentialocl::ExpCS:
	//	ImperativeOCLExpCS;
	public ImperativeOCLGrammarAccess.GrammmarCSElements getGrammmarCSAccess() {
		return gaImperativeOCL.getGrammmarCSAccess();
	}
	
	public ParserRule getGrammmarCSRule() {
		return getGrammmarCSAccess().getRule();
	}

	//enum SeverityKindCS:
	//	error | warning | fatal;
	public ImperativeOCLGrammarAccess.SeverityKindCSElements getSeverityKindCSAccess() {
		return gaImperativeOCL.getSeverityKindCSAccess();
	}
	
	public EnumRule getSeverityKindCSRule() {
		return getSeverityKindCSAccess().getRule();
	}

	//enum InitOpCS:
	//	Equals="=" | ColonEquals=":=" | ColonColonEquals="::=";
	public ImperativeOCLGrammarAccess.InitOpCSElements getInitOpCSAccess() {
		return gaImperativeOCL.getInitOpCSAccess();
	}
	
	public EnumRule getInitOpCSRule() {
		return getInitOpCSAccess().getRule();
	}

	//enum AssignOpCS:
	//	Single=":=" | MultiWithReset="::=" | MultiWithoutReset="+=";
	public ImperativeOCLGrammarAccess.AssignOpCSElements getAssignOpCSAccess() {
		return gaImperativeOCL.getAssignOpCSAccess();
	}
	
	public EnumRule getAssignOpCSRule() {
		return getAssignOpCSAccess().getRule();
	}

	////ImperativeOCLReservedKeyword:
	// //	'default'
	// //	| 'elif'
	// //	| RESOLVE_KIND
	// //	| RESOLVE_IN_KIND;
	// //
	//
	////ImperativeOCLPrefixOperator:
	// //	'#' | '##' | '*';
	// //
	// //ImperativeOCLInfixOperator:
	//
	////	ASSIGN_OP | 'default' | '==';
	// //
	// //ImperativeOCLNavigationOperator:
	// //	'!->';
	// //PrefixOperator:
	//
	////	EssentialOCLPrefixOperator | QVToPrefixOperator;
	// //
	// //InfixOperator:
	//
	////	EssentialOCLInfixOperator | QVToInfixOperator;
	// //
	// //NavigationOperator:
	//
	////	EssentialOCLNavigationOperator | QVToNavigationOperator;
	// ImperativeOCLExpCS returns essentialocl::ExpCS:
	//	ExpCS;
	public ImperativeOCLGrammarAccess.ImperativeOCLExpCSElements getImperativeOCLExpCSAccess() {
		return gaImperativeOCL.getImperativeOCLExpCSAccess();
	}
	
	public ParserRule getImperativeOCLExpCSRule() {
		return getImperativeOCLExpCSAccess().getRule();
	}

	//// ********* ImperativeOCL Types *********
	// // TypeLiteralCS redefined to include the new List and Dict types
	//
	//// FIXME refactor its definition in EssentialOCL to allow extension
	// TypeLiteralCS returns base::TypedRefCS:
	//	PrimitiveTypeCS | CollectionTypeCS | MapTypeCS | TupleTypeCS | ListTypeCS | DictTypeCS;
	public ImperativeOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaImperativeOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//ListTypeCS:
	//	"List" "(" ownedTypeRef=TypeExpCS ")";
	public ImperativeOCLGrammarAccess.ListTypeCSElements getListTypeCSAccess() {
		return gaImperativeOCL.getListTypeCSAccess();
	}
	
	public ParserRule getListTypeCSRule() {
		return getListTypeCSAccess().getRule();
	}

	//DictTypeCS:
	//	"Dict" "(" ownedKeyTypeRef=TypeExpCS "," ownedValueTypeRef=TypeExpCS ")";
	public ImperativeOCLGrammarAccess.DictTypeCSElements getDictTypeCSAccess() {
		return gaImperativeOCL.getDictTypeCSAccess();
	}
	
	public ParserRule getDictTypeCSRule() {
		return getDictTypeCSAccess().getRule();
	}

	//// Typedef is deprecated
	// // ********* ImperativeOCL Expressions *********
	//
	//// PrimaryExpCS redefined to include the new List and Dict literal expressions
	//
	//// FIXME refactor its definition in EssentialOCL to allow extension
	// // These rules are ordered most rejectable first
	//
	//PrimaryExpCS returns essentialocl::ExpCS:
	//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | MapLiteralExpCS |
	//	CollectionLiteralExpCS | LambdaLiteralExpCS | ImperativeExpCS | NameExpCS;
	public ImperativeOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaImperativeOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//ImperativeExpCS returns essentialocl::ExpCS:
	//	ExpressionBlockCS | AssertExpCS | BreakExpCS | ContinueExpCS | InstantiationExpCS | LogExpCS | RaiseExpCS |
	//	VarsInitializationCS | ListLiteralExpCS | DictLiteralExpCS | TypeLiteralExpCS | ReturnExpCS | ComputeExpCS | ForExpCS
	//	| WhileExpCS | ImperativeIterateExpCS | SwitchExpCS | AssignExpCS | TryExpCS;
	public ImperativeOCLGrammarAccess.ImperativeExpCSElements getImperativeExpCSAccess() {
		return gaImperativeOCL.getImperativeExpCSAccess();
	}
	
	public ParserRule getImperativeExpCSRule() {
		return getImperativeExpCSAccess().getRule();
	}

	//AssertExpCS:
	//	"assert" severity=SeverityKindCS? ownedAssertion=ExpCS ("with" ownedLog=LogExpCS)?;
	public ImperativeOCLGrammarAccess.AssertExpCSElements getAssertExpCSAccess() {
		return gaImperativeOCL.getAssertExpCSAccess();
	}
	
	public ParserRule getAssertExpCSRule() {
		return getAssertExpCSAccess().getRule();
	}

	//AssignExpCS:
	//	ownedLeft=NameExpCS assignOp=AssignOpCS ownedValue=ExpCS ("default" ownedDefault=ExpCS)?;
	public ImperativeOCLGrammarAccess.AssignExpCSElements getAssignExpCSAccess() {
		return gaImperativeOCL.getAssignExpCSAccess();
	}
	
	public ParserRule getAssignExpCSRule() {
		return getAssignExpCSAccess().getRule();
	}

	//BreakExpCS:
	//	{BreakExpCS} "break";
	public ImperativeOCLGrammarAccess.BreakExpCSElements getBreakExpCSAccess() {
		return gaImperativeOCL.getBreakExpCSAccess();
	}
	
	public ParserRule getBreakExpCSRule() {
		return getBreakExpCSAccess().getRule();
	}

	//CatchExpCS:
	//	"except" "(" (varName=UnrestrictedName ":")? ownedExceptionRefs+=TypeExpCS ("," ownedExceptionRefs+=TypeExpCS)* ")"
	//	"{" ownedExps+=ExpCS* "}";
	public ImperativeOCLGrammarAccess.CatchExpCSElements getCatchExpCSAccess() {
		return gaImperativeOCL.getCatchExpCSAccess();
	}
	
	public ParserRule getCatchExpCSRule() {
		return getCatchExpCSAccess().getRule();
	}

	//ComputeExpCS:
	//	"compute" "(" ownedResultVar=VarDeclarationCS ")" "{" ownedExps+=ExpressionStatementCS "}";
	public ImperativeOCLGrammarAccess.ComputeExpCSElements getComputeExpCSAccess() {
		return gaImperativeOCL.getComputeExpCSAccess();
	}
	
	public ParserRule getComputeExpCSRule() {
		return getComputeExpCSAccess().getRule();
	}

	//ContinueExpCS:
	//	{ContinueExpCS} "continue";
	public ImperativeOCLGrammarAccess.ContinueExpCSElements getContinueExpCSAccess() {
		return gaImperativeOCL.getContinueExpCSAccess();
	}
	
	public ParserRule getContinueExpCSRule() {
		return getContinueExpCSAccess().getRule();
	}

	//DictLiteralExpCS:
	//	"Dict" "{" {DictLiteralExpCS} (ownedParts+=DictLiteralPartCS ("," ownedParts+=DictLiteralPartCS)*)? "}";
	public ImperativeOCLGrammarAccess.DictLiteralExpCSElements getDictLiteralExpCSAccess() {
		return gaImperativeOCL.getDictLiteralExpCSAccess();
	}
	
	public ParserRule getDictLiteralExpCSRule() {
		return getDictLiteralExpCSAccess().getRule();
	}

	//DictLiteralPartCS:
	//	ownedKey=PrimitiveLiteralExpCS "=" ownedValue=ExpCS;
	public ImperativeOCLGrammarAccess.DictLiteralPartCSElements getDictLiteralPartCSAccess() {
		return gaImperativeOCL.getDictLiteralPartCSAccess();
	}
	
	public ParserRule getDictLiteralPartCSRule() {
		return getDictLiteralPartCSAccess().getRule();
	}

	//ExpressionBlockCS:
	//	{ExpressionBlockCS} "do"? "{" ownedExps+=ExpressionStatementCS* "}";
	public ImperativeOCLGrammarAccess.ExpressionBlockCSElements getExpressionBlockCSAccess() {
		return gaImperativeOCL.getExpressionBlockCSAccess();
	}
	
	public ParserRule getExpressionBlockCSRule() {
		return getExpressionBlockCSAccess().getRule();
	}

	//ExpressionStatementCS returns essentialocl::ExpCS:
	//	ExpCS ";"?;
	public ImperativeOCLGrammarAccess.ExpressionStatementCSElements getExpressionStatementCSAccess() {
		return gaImperativeOCL.getExpressionStatementCSAccess();
	}
	
	public ParserRule getExpressionStatementCSRule() {
		return getExpressionStatementCSAccess().getRule();
	}

	//ExtentRefCS:
	//	ownedPathName=PathNameCS;
	public ImperativeOCLGrammarAccess.ExtentRefCSElements getExtentRefCSAccess() {
		return gaImperativeOCL.getExtentRefCSAccess();
	}
	
	public ParserRule getExtentRefCSRule() {
		return getExtentRefCSAccess().getRule();
	}

	//// FIXME align with NameExpCS
	// ForExpCS:
	//	("forEach" | isOne?="forOne") "(" (ownedTarget=VarDeclarationCS ";")? ownedIterator=VarDeclarationNoInitCS ("|"
	//	ownedCondition=ExpCS)? ")" ownedBody=ExpCS;
	public ImperativeOCLGrammarAccess.ForExpCSElements getForExpCSAccess() {
		return gaImperativeOCL.getForExpCSAccess();
	}
	
	public ParserRule getForExpCSRule() {
		return getForExpCSAccess().getRule();
	}

	//// FIXME align with NameExpCS
	// ImperativeIterateExpCS:
	//	name="xcollect" "(" (ownedIterator=VarDeclarationNoInitCS "|")? ownedBody=ExpCS ")" | name=("xselect" | "xselectOne")
	//	"(" (ownedIterator=VarDeclarationNoInitCS "|")? ownedCondition=ExpCS ")" | name=("xcollectselect" |
	//	"xcollectselectOne") "(" (ownedIterator=VarDeclarationNoInitCS ";")? ownedTarget=VarDeclarationCS ":="
	//	ownedBody=ExpCS "|" ownedCondition=ExpCS ")";
	public ImperativeOCLGrammarAccess.ImperativeIterateExpCSElements getImperativeIterateExpCSAccess() {
		return gaImperativeOCL.getImperativeIterateExpCSAccess();
	}
	
	public ParserRule getImperativeIterateExpCSRule() {
		return getImperativeIterateExpCSAccess().getRule();
	}

	//// FIXME if a new parameter can specify modelExtent, then it should probably belong to QVTOperational package rather than ImperativeOCL
	//
	//InstantiationExpCS:
	//	"new" ownedClassRef=TypeExpCS ("@" ownedExtentRef=TypeNameExpCS)? "(" (ownedArguments+=ExpCS (","
	//	ownedArguments+=ExpCS)*)? ")";
	public ImperativeOCLGrammarAccess.InstantiationExpCSElements getInstantiationExpCSAccess() {
		return gaImperativeOCL.getInstantiationExpCSAccess();
	}
	
	public ParserRule getInstantiationExpCSRule() {
		return getInstantiationExpCSAccess().getRule();
	}

	//ListLiteralExpCS:
	//	"List" "{" {ListLiteralExpCS} (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public ImperativeOCLGrammarAccess.ListLiteralExpCSElements getListLiteralExpCSAccess() {
		return gaImperativeOCL.getListLiteralExpCSAccess();
	}
	
	public ParserRule getListLiteralExpCSRule() {
		return getListLiteralExpCSAccess().getRule();
	}

	//// FIXME align with NameExpCS
	// // FIXME severity -> enum
	//
	//// Improve spec: result.log("message", severity) when condition
	// LogExpCS:
	//	"log" "(" ownedMessage=StringLiteralExpCS ("," ownedElement=ExpCS)? ("," severity=SeverityKindCS)? ")" ("when"
	//	ownedCondition=ExpCS)?;
	public ImperativeOCLGrammarAccess.LogExpCSElements getLogExpCSAccess() {
		return gaImperativeOCL.getLogExpCSAccess();
	}
	
	public ParserRule getLogExpCSRule() {
		return getLogExpCSAccess().getRule();
	}

	//// FIXME OMG: should support several arguments
	// RaiseExpCS:
	//	"raise" ownedExceptionRef=TypeExpCS "(" ownedArguments+=ExpCS ("," ownedArguments+=ExpCS)* ")";
	public ImperativeOCLGrammarAccess.RaiseExpCSElements getRaiseExpCSAccess() {
		return gaImperativeOCL.getRaiseExpCSAccess();
	}
	
	public ParserRule getRaiseExpCSRule() {
		return getRaiseExpCSAccess().getRule();
	}

	//ReturnExpCS:
	//	"return" {ReturnExpCS} ownedValue=ExpCS?;
	public ImperativeOCLGrammarAccess.ReturnExpCSElements getReturnExpCSAccess() {
		return gaImperativeOCL.getReturnExpCSAccess();
	}
	
	public ParserRule getReturnExpCSRule() {
		return getReturnExpCSAccess().getRule();
	}

	//StringLiteral:
	//	SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING;
	public ImperativeOCLGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaImperativeOCL.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//// FIXME OMG issue: list->swith(i) {...} syntax ????? 
	// // FIXME SwitchExpCS should probably be a CallExp
	// SwitchExpCS:
	//	ifSyntax?="if" ownedAltParts+=SwitchAltCS ("elif" ownedAltParts+=SwitchAltCS)* ("else" ownedElsePart=ExpCS)? "endif"?
	//	| "switch" ("(" ownedIterator=VarDeclarationNoInitCS ")")? "{" ("case" ownedAltParts+=SwitchAltCS)+ ("else"
	//	ownedElsePart=ExpCS)? "}";
	public ImperativeOCLGrammarAccess.SwitchExpCSElements getSwitchExpCSAccess() {
		return gaImperativeOCL.getSwitchExpCSAccess();
	}
	
	public ParserRule getSwitchExpCSRule() {
		return getSwitchExpCSAccess().getRule();
	}

	//SwitchAltCS:
	//	"(" ownedCondition=ExpCS ")" ownedBody=ExpCS;
	public ImperativeOCLGrammarAccess.SwitchAltCSElements getSwitchAltCSAccess() {
		return gaImperativeOCL.getSwitchAltCSAccess();
	}
	
	public ParserRule getSwitchAltCSRule() {
		return getSwitchAltCSAccess().getRule();
	}

	//// FIXME in the AS there should be at least one CatchExp
	// TryExpCS:
	//	{TryExpCS} "try" "{" ownedExps+=ExpCS* "}" ownedCatchs+=CatchExpCS+;
	public ImperativeOCLGrammarAccess.TryExpCSElements getTryExpCSAccess() {
		return gaImperativeOCL.getTryExpCSAccess();
	}
	
	public ParserRule getTryExpCSRule() {
		return getTryExpCSAccess().getRule();
	}

	//// FIXME there should be additional disambiguation between NameExpCS and UnlinkExp
	//
	//// UnlinkExpCS returns essentialocl::NameExpCS:
	// VarDeclarationCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? (initOp=InitOpCS ownedInitExpression=ExpCS)?;
	public ImperativeOCLGrammarAccess.VarDeclarationCSElements getVarDeclarationCSAccess() {
		return gaImperativeOCL.getVarDeclarationCSAccess();
	}
	
	public ParserRule getVarDeclarationCSRule() {
		return getVarDeclarationCSAccess().getRule();
	}

	//VarDeclarationNoInitCS returns VarDeclarationCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)?;
	public ImperativeOCLGrammarAccess.VarDeclarationNoInitCSElements getVarDeclarationNoInitCSAccess() {
		return gaImperativeOCL.getVarDeclarationNoInitCSAccess();
	}
	
	public ParserRule getVarDeclarationNoInitCSRule() {
		return getVarDeclarationNoInitCSAccess().getRule();
	}

	//VarsInitializationCS:
	//	"var" ownedVarDeclarations+=VarDeclarationCS ("," ownedVarDeclarations+=VarDeclarationCS)*;
	public ImperativeOCLGrammarAccess.VarsInitializationCSElements getVarsInitializationCSAccess() {
		return gaImperativeOCL.getVarsInitializationCSAccess();
	}
	
	public ParserRule getVarsInitializationCSRule() {
		return getVarsInitializationCSAccess().getRule();
	}

	//WhileExpCS:
	//	"while" "(" (ownedResultVar=VarDeclarationCS ";")? ownedCondition=ExpCS ")" "{" ownedExps+=ExpressionStatementCS*
	//	"}";
	public ImperativeOCLGrammarAccess.WhileExpCSElements getWhileExpCSAccess() {
		return gaImperativeOCL.getWhileExpCSAccess();
	}
	
	public ParserRule getWhileExpCSRule() {
		return getWhileExpCSAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	// Model returns ContextCS:
	//	ownedExpression=ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaImperativeOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLReservedKeyword:
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaImperativeOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnaryOperatorName:
	//	"-" | "not";
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaImperativeOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLInfixOperatorName:
	//	"*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies";
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaImperativeOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLNavigationOperatorName:
	//	"." | "->" | "?." | "?->";
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaImperativeOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}

	//BinaryOperatorName:
	//	InfixOperatorName | NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaImperativeOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}

	//// Intended to be overrideable
	// InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaImperativeOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}

	//// Intended to be overrideable
	// NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName;
	public EssentialOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaImperativeOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}

	//// Intended to be overrideable
	// UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaImperativeOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Names
	//
	////---------------------------------------------------------------------
	//
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnrestrictedName returns ecore::EString:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaImperativeOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnrestrictedName returns ecore::EString:
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaImperativeOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnreservedName returns ecore::EString:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Map" | "Tuple";
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaImperativeOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnreservedName returns ecore::EString:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaImperativeOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//URIPathNameCS returns base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ("::" ownedPathElements+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaImperativeOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS returns base::PathElementCS:
	//	referredElement=[pivot::NamedElement|UnrestrictedName] | {base::PathElementWithURICS}
	//	referredElement=[pivot::Namespace|URI];
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaImperativeOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Types
	//
	////---------------------------------------------------------------------
	// PrimitiveTypeIdentifier:
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaImperativeOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//PrimitiveTypeCS returns base::PrimitiveTypeRefCS:
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaImperativeOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaImperativeOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ("(" ownedType=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaImperativeOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MapTypeCS:
	//	name="Map" ("(" ownedKeyType=TypeExpCS "," ownedValueType=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaImperativeOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}

	//TupleTypeCS returns base::TupleTypeCS:
	//	name="Tuple" ("(" (ownedParts+=TuplePartCS ("," ownedParts+=TuplePartCS)*)? ")")?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaImperativeOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS returns base::TuplePartCS:
	//	name=UnrestrictedName ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaImperativeOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Literals
	//
	////---------------------------------------------------------------------
	// CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS "{" (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaImperativeOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	ownedExpression=ExpCS (".." ownedLastExpression=ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaImperativeOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS "{" (ownedParts+=PatternExpCS ("," ownedParts+=PatternExpCS)* ("++"
	//	restVariableName=Identifier))? "}";
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaImperativeOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}

	//// PatternPartCS
	// ShadowPartCS:
	//	referredProperty=[pivot::Property|UnrestrictedName] "=" ownedInitExpression=(ExpCS | PatternExpCS);
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaImperativeOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}

	//PatternExpCS:
	//	patternVariableName=UnrestrictedName? ":" ownedPatternType=TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaImperativeOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}

	//LambdaLiteralExpCS:
	//	"Lambda" "{" ownedExpressionCS=ExpCS "}";
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaImperativeOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}

	//MapLiteralExpCS:
	//	ownedType=MapTypeCS "{" (ownedParts+=MapLiteralPartCS ("," ownedParts+=MapLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaImperativeOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}

	//MapLiteralPartCS:
	//	ownedKey=ExpCS "<-" ownedValue=ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaImperativeOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
	//	NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaImperativeOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	"Tuple" "{" ownedParts+=TupleLiteralPartCS ("," ownedParts+=TupleLiteralPartCS)* "}";
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaImperativeOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaImperativeOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaImperativeOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaImperativeOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	symbol="true" | symbol="false";
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaImperativeOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} "*";
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaImperativeOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} "invalid";
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaImperativeOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} "null";
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaImperativeOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS returns base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaImperativeOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaImperativeOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ("{" ownedPatternGuard=ExpCS "}")?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaImperativeOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS returns base::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS) ownedMultiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaImperativeOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Expressions
	//
	////---------------------------------------------------------------------
	//
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	//
	////  that let is right associative, whereas infix operators are left associative.
	//
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	// // is
	//
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	//
	/// * An expression elaborates a prefixed expression with zero or more binary operator and expression suffixes.
	// * An optionally prefixed let expression is permitted except when suffixed with further expressions.* /
	//ExpCS:
	//	PrefixedPrimaryExpCS ({InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)?
	//	//	({InfixExpCS} ownedSource=PrefixedExpCS name=BinaryOperatorName ownedArgument=ExpCS)
	// //| 	PrefixedExpCS
	//
	//	// the above takes exponential or worse time for backtracking, below is fast
	// | PrefixedLetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaImperativeOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	/// * A prefixed let expression elaborates a let expression with zero or more unary prefix operators. * / PrefixedLetExpCS
	//returns ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS;
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaImperativeOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}

	/// * A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. * /
	//PrefixedPrimaryExpCS returns ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaImperativeOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}

	/// * A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.* /
	//NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?="@"
	//	"pre")?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaImperativeOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.* /
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} "{" ((ownedParts+=ShadowPartCS ("," ownedParts+=ShadowPartCS)*)? | value=StringLiteral) "}";
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaImperativeOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for template specialisations and operations arguments.* /
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} "(" (ownedArguments+=NavigatingArgCS ownedArguments+=NavigatingCommaArgCS*
	//	(ownedArguments+=NavigatingSemiArgCS ownedArguments+=NavigatingCommaArgCS*)? (ownedArguments+=NavigatingBarArgCS
	//	ownedArguments+=NavigatingCommaArgCS*)*)? ")";
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaImperativeOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}

	/// * A square bracket clause is a generalized rule for association class qualifiers and roles.* / SquareBracketedClauseCS:
	//	"[" ownedTerms+=ExpCS ("," ownedTerms+=ExpCS)* "]";
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaImperativeOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}

	/// * A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. * /
	//// Type-less init is an illegal infix expression
	// NavigatingArgCS:
	//	ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)? | "in"
	//	ownedInitExpression=ExpCS)? | ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaImperativeOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	/// * A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. * /
	//// Type-less init is an illegal infix expression
	// NavigatingBarArgCS returns NavigatingArgCS:
	//	prefix="|" ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaImperativeOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	/// * A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. * /
	//// Type-less init is an illegal infix expression
	// NavigatingCommaArgCS returns NavigatingArgCS:
	//	prefix="," ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)? | "in"
	//	ownedInitExpression=ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaImperativeOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	/// * A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. * /
	//// Type-less init is an illegal infix expression
	// NavigatingSemiArgCS returns NavigatingArgCS:
	//	prefix=";" ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaImperativeOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//// Intended to be overridden
	// //	'?'	-- defined by Complete OCL
	// NavigatingArgExpCS returns ExpCS:
	//	ExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaImperativeOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//IfExpCS:
	//	"if" ownedCondition=(ExpCS | PatternExpCS) "then" ownedThenExpression=ExpCS //	ifThenExpressions+=IfThenExpCS
	//
	//	ownedIfThenExpressions+=ElseIfThenExpCS* "else" ownedElseExpression=ExpCS "endif";
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaImperativeOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	////IfThenExpCS returns IfThenExpCS:
	// //	'if' condition=ExpCS
	// //	'then' thenExpression=ExpCS
	// //;
	// ElseIfThenExpCS
	//returns IfThenExpCS:
	//	"elseif" ownedCondition=ExpCS "then" ownedThenExpression=ExpCS;
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaImperativeOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}

	//LetExpCS:
	//	"let" ownedVariables+=LetVariableCS ("," ownedVariables+=LetVariableCS)* "in" ownedInExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaImperativeOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (":" ownedType=TypeExpCS)? "="
	//	ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaImperativeOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	"(" ownedExpression=ExpCS ")";
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaImperativeOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} "self";
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaImperativeOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}

	//MultiplicityBoundsCS:
	//	lowerBound=LOWER (".." upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaImperativeOCL.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityStringCS:
	//	stringBounds=("*" | "+" | "?");
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaImperativeOCL.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ("::" ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaImperativeOCL.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS returns PathElementCS:
	//	referredElement=[pivot::NamedElement|UnrestrictedName];
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaImperativeOCL.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS returns PathElementCS:
	//	referredElement=[pivot::NamedElement|UnreservedName];
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaImperativeOCL.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS ("," ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaImperativeOCL.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}

	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaImperativeOCL.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}

	//TemplateSignatureCS:
	//	"(" ownedParameters+=TypeParameterCS ("," ownedParameters+=TypeParameterCS)* ")";
	public BaseGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaImperativeOCL.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}

	//TypeParameterCS:
	//	name=UnrestrictedName ("extends" ownedExtends+=TypedRefCS ("&&" ownedExtends+=TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaImperativeOCL.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}

	//TypedRefCS:
	//	TypedTypeRefCS;
	public BaseGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaImperativeOCL.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}

	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ("(" ownedBinding=TemplateBindingCS ")")?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaImperativeOCL.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}

	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} "?" ("extends" ownedExtends=TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaImperativeOCL.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaImperativeOCL.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaImperativeOCL.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	/// * A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. * /
	//LOWER returns ecore::EInt:
	//	INT;
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaImperativeOCL.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	/// * A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// * /
	//// Not terminal to allow parser backtracking to sort out "5..7"
	//
	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	// NUMBER_LITERAL returns
	//BigNumber:
	//	INT;
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaImperativeOCL.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	/// * An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. * /
	//UPPER returns ecore::EInt:
	//	INT | "*";
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaImperativeOCL.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaImperativeOCL.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\");
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaImperativeOCL.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaImperativeOCL.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//	"\"" (ESCAPED_CHARACTER | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaImperativeOCL.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"\'" (ESCAPED_CHARACTER | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaImperativeOCL.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/\'"->"\'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaImperativeOCL.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | "0".."9")*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaImperativeOCL.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaImperativeOCL.getESCAPED_IDRule();
	} 

	//// String to allow diverse re-use
	// // multiple leading zeroes occur as floating point fractional part
	// terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaImperativeOCL.getINTRule();
	} 

	/// * A multi-line comment supports a comment that may span more than one line using familiar slash-star...star-slash comment delimiters * /
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaImperativeOCL.getML_COMMENTRule();
	} 

	/// * A single-line comment supports a comment that terminates at the end of the line * / terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaImperativeOCL.getSL_COMMENTRule();
	} 

	/// * Whitespace may occur between any pair of tokens * / terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaImperativeOCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaImperativeOCL.getANY_OTHERRule();
	} 
}
