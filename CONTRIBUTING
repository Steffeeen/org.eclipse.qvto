# Contributing to Eclipse QVT-OML

Thanks for your interest in this project.

## Project description

The Eclipse QVT Operational component is an implementation of the Operational
Mappings Language defined by Meta Object Facility™ (MOF™) 2.0
Query/View/Transformation™ (QVT™). In long term, it aims to provide a
complete implementation of the operational part of the standard. A high level
overview of the QVT Operational language is available in form of presentations
Model Transformation with Operational QVT and The Art of Model Transformation
with Operational QVT.

Operational QVT
project provides a powerful Eclipse IDE: feature-rich editor (syntax
highlighting, hovers, hyperlinks, code completion, templates, outlines, markers,
etc.) debugger (conditional breakpoints, variables view, expressions view,
watches) metamodel browser, trace view project builders, launch configurations
deployment facilities and Ant support Java API for executing QVT transformations
programmatically, support for the standalone execution of transformations
support of Java Black-Box units and libraries seamless integration with JDT
supporting co-development of QVTo and Java in single workspace Additional
tooling QVTO Code Coverage provides: annotate the Operational QVT Editor to
highlight covered and non-covered parts of transformation JUnit launch
configuration to integrate with the JUnit test framework.

* https://projects.eclipse.org/projects/modeling.mmt.qvt-oml

## Terms of Use

This repository is subject to the Terms of Use of the Eclipse Foundation

* https://www.eclipse.org/legal/termsofuse.php

## Developer resources

Information regarding source code management, builds, coding standards, and
more.

* https://projects.eclipse.org/projects/modeling.mmt.qvt-oml/developer

The project maintains the following source code repositories

* https://git.eclipse.org/r/mmt/org.eclipse.qvto

This project uses Bugzilla to track ongoing development and issues.

* Search for issues: https://eclipse.org/bugs/buglist.cgi?product=QVTo
* Create a new report: https://eclipse.org/bugs/enter_bug.cgi?product=QVTo

Be sure to search for existing bugs before you create another one. Remember that
contributions are always welcome!

## Eclipse Development Process

This Eclipse Foundation open project is governed by the Eclipse Foundation
Development Process and operates under the terms of the Eclipse IP Policy.

* https://eclipse.org/projects/dev_process
* https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf

## Eclipse Contributor Agreement

In order to be able to contribute to Eclipse Foundation projects you must
electronically sign the Eclipse Contributor Agreement (ECA).

* https://www.eclipse.org/legal/ECA.php

The ECA provides the Eclipse Foundation with a permanent record that you agree
that each of your contributions will comply with the commitments documented in
the Developer Certificate of Origin (DCO). Having an ECA on file associated with
the email address matching the "Author" field of your contribution's Git commits
fulfills the DCO's requirement that you sign-off on your contributions.

For more information, please see the Eclipse Committer Handbook:
https://www.eclipse.org/projects/handbook/#resources-commit

## Contact

Contact the project developers via the project's "dev" list.

* https://dev.eclipse.org/mailman/listinfo/qvto-dev

